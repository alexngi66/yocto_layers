#include "twg_sysfs.h"

static ssize_t twg_sop_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 int ret = -EIO;
// printk( KERN_DEBUG "%s %s(%s)\n", _a->attr.name, __FUNCTION__, _k->name);
// if ( strcmp( _a->attr.name, "mode") == 0) return( sprintf( _b, "%d\n", p->mode));
 if ( _a->show) return( _a->show( _k, _a, _b));
 return( ret);  }

static ssize_t twg_sop_W( struct kobject *_k, struct kobj_attribute *_a, const char *_b, size_t _c) {
 int ret = -EIO;
// printk( KERN_DEBUG "%s %s(%s)\n", _a->attr.name, __FUNCTION__, _k->name);
 if ( _a->store) return( _a->store( _k, _a, _b, _c));
 return( ret);  }

static void twg_sysfs_release( struct kobject *_k) {  return;  }

static const struct sysfs_ops twg_sysfs_ops = {
 .show		= twg_sop_R,
 .store		= twg_sop_W,
};

static ssize_t twg_sop_name_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%s\n", _p->name));  }

static ssize_t twg_sop_stat_done_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%d\n", _p->stat_done));  }
static ssize_t twg_sop_stat_over_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%d\n", _p->stat_over));  }

static ssize_t twg_sop_mode_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%d\n", _p->mode));  }

static ssize_t twg_sop_mode_W( struct kobject *_k, struct kobj_attribute *_a, const char *_b, size_t _c) {
 int ret = -EIO, x;
 twg_pdata_t *_p;
 if ( ( ret = kstrtoint( _b, 10, &x)) < 0) return( ret);
 if ( !( _p = container_of( _k, twg_pdata_t, wKo))) return( -EIO);
 change_mode( _p, x);
 return( _c);  }

static ssize_t twg_sop_out0_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 if ( !_p->pin_oc) return( -EIO);
 return( sprintf( _b, "%d\n", gpio_get_value( _p->pin_oc)));  }

static ssize_t twg_sop_out0_W( struct kobject *_k, struct kobj_attribute *_a, const char *_b, size_t _c) {
 int ret = -EIO, x;
 twg_pdata_t *_p;
 if ( !( _p  = container_of( _k, twg_pdata_t, wKo))) return( -EIO);
 if ( !_p->pin_oc) return( ret);
 if ( ( ret = kstrtoint( _b, 10, &x)) < 0) return( ret);
 gpio_set_value( _p->pin_oc, x);
 return( _c);  }

static ssize_t twg_sop_dbgi_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%d\n", _p->debug));  }

static ssize_t twg_sop_dbgi_W( struct kobject *_k, struct kobj_attribute *_a, const char *_b, size_t _c) {
 int ret = -EIO, x;
 twg_pdata_t *_p;
 if ( ( ret = kstrtoint( _b, 10, &x)) < 0) return( ret);
 if ( !( _p = container_of( _k, twg_pdata_t, wKo))) return( -EIO);
 _p->debug = x;
 return( _c);  }

static ssize_t twg_sop_conr_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 return( sprintf( _b, "%d\n", _p->clear_on_read));  }

static ssize_t twg_sop_conr_W( struct kobject *_k, struct kobj_attribute *_a, const char *_b, size_t _c) {
 int ret = -EIO, x;
 twg_pdata_t *_p;
 if ( ( ret = kstrtoint( _b, 10, &x)) < 0) return( ret);
 if ( !( _p = container_of( _k, twg_pdata_t, wKo))) return( -EIO);
 _p->clear_on_read = x;
 return( _c);  }

//static ssize_t twg_sop_data_R( struct kobject *_k, struct bin_attribute *_a, char *_b) {
static ssize_t twg_sop_data_R( struct kobject *_k, struct kobj_attribute *_a, char *_b) {
 int ret = -ENXIO;
 uint16_t x;
 twg_pdata_t *_p = container_of( _k, twg_pdata_t, wKo);
 if ( !_p) return( -EIO);
 if ( !_p->d_done) return( ret);
 x = cpu_to_le16( _p->d.blen);
 memcpy( _b, &( x), sizeof( x));
 memcpy( _b+sizeof(x), &( _p->d.buff), sizeof( _p->d.buff));
// memcpy( _b, &( _p->d), sizeof( _p->d));
 if ( _p->clear_on_read) clean_buff( _p);
 return( sizeof( _p->d));  }

static struct kobj_attribute twg_satt_name =      __ATTR(     name,0444,twg_sop_name_R,     NULL);
static struct kobj_attribute twg_satt_mode =      __ATTR(     mode,0664,twg_sop_mode_R,     twg_sop_mode_W);
static struct kobj_attribute twg_satt_stat_done = __ATTR(stat_done,0444,twg_sop_stat_done_R,NULL);
static struct kobj_attribute twg_satt_stat_over = __ATTR(stat_over,0444,twg_sop_stat_over_R,NULL);
static struct kobj_attribute twg_satt_out0 =      __ATTR(     out0,0664,twg_sop_out0_R,     twg_sop_out0_W);
static struct kobj_attribute twg_satt_dbgi =      __ATTR(     dbgi,0664,twg_sop_dbgi_R,     twg_sop_dbgi_W);
static struct kobj_attribute twg_satt_conr =      __ATTR(     dbgi,0664,twg_sop_conr_R,     twg_sop_conr_W);
static struct kobj_attribute twg_satt_data =      __ATTR(     data,0664,twg_sop_data_R,     NULL);

static struct attribute *twg_sysfs_attrs[] = {
 &twg_satt_name.attr,
 &twg_satt_mode.attr,
 &twg_satt_stat_done.attr,
 &twg_satt_stat_over.attr,
 &twg_satt_out0.attr,
 &twg_satt_dbgi.attr,
 &twg_satt_data.attr,
 &twg_satt_conr.attr,
 NULL,
};
//static struct bin_attribute *twg_sysfs_bin_attrs[] = {
// &twg_satt_data.attr,
// NULL,
//};

static struct kobj_type ktype_twg = {
 .sysfs_ops		= &twg_sysfs_ops,
 .default_attrs		= twg_sysfs_attrs,
 .release		= twg_sysfs_release,
};

// ---------- main (exported) functions
void twg_sysfs_init( struct platform_device *_pdev) {
 twg_pdata_t *_p = ( twg_pdata_t *)_pdev->dev.platform_data;
 if ( kobject_init_and_add( &( _p->wKo), &ktype_twg, NULL, _p->name) < 0) {
   printk( KERN_ERR "%s kobj create error\n", _p->name);
   return;  }
 return;  }

void twg_sysfs_clean( struct platform_device *_pdev) {
 twg_pdata_t *_p = ( twg_pdata_t *)_pdev->dev.platform_data;
 kobject_put( &( _p->wKo));
 return;  }
