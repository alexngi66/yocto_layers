--- linux/arch/arm/mach-omap2/timer.c	2015-09-24 09:17:11.000000000 +0800
+++ linux/arch/arm/mach-omap2/timer.c	2015-09-24 09:50:21.796299117 +0800
@@ -107,6 +107,7 @@
 {
 	u32 period;
 
+pr_warn("%s() 0 base:%p\n", __FUNCTION__, clkev.io_base);
 	__omap_dm_timer_stop(&clkev, OMAP_TIMER_POSTED, clkev.rate);
 
 	switch (mode) {
@@ -170,6 +171,7 @@
 {
 	struct device_node *np;
 
+pr_warn("%s() 0 prop:%s\n", __FUNCTION__, property);
 	for_each_matching_node(np, match) {
 		if (!of_device_is_available(np))
 			continue;
@@ -202,9 +204,11 @@
 {
 	struct device_node *np;
 
+pr_warn("%s() 0\n", __FUNCTION__);
 	if (!cpu_is_omap34xx())
 		return;
 
+pr_warn("%s() 1\n", __FUNCTION__);
 	/* If we are a secure device, remove any secure timer nodes */
 	if ((omap_type() != OMAP2_DEVICE_TYPE_GP)) {
 		np = omap_get_timer_dt(omap_timer_match, "ti,timer-secure");
@@ -240,15 +244,19 @@
 	struct clk *src;
 	int r = 0;
 
+pr_warn("%s() 0 fck_source:%s property:%s\n", __FUNCTION__, fck_source, property);
 	if (of_have_populated_dt()) {
+pr_warn("%s() 100\n", __FUNCTION__);
 		np = omap_get_timer_dt(omap_timer_match, property);
 		if (!np)
 			return -ENODEV;
+pr_warn("%s() 101\n", __FUNCTION__);
 
 		of_property_read_string_index(np, "ti,hwmods", 0, &oh_name);
 		if (!oh_name)
 			return -ENODEV;
 
+pr_warn("%s() 102 oh_name:%s\n", __FUNCTION__, oh_name);
 		timer->irq = irq_of_parse_and_map(np, 0);
 		if (!timer->irq)
 			return -ENXIO;
@@ -257,6 +265,7 @@
 
 		of_node_put(np);
 	} else {
+pr_warn("%s() 110\n", __FUNCTION__);
 		if (omap_dm_timer_reserve_systimer(timer->id))
 			return -ENODEV;
 
@@ -264,12 +273,14 @@
 		oh_name = name;
 	}
 
+pr_warn("%s() 2 name:%s\n", __FUNCTION__, oh_name);
 	oh = omap_hwmod_lookup(oh_name);
 	if (!oh)
 		return -ENODEV;
 
 	*timer_name = oh->name;
 
+pr_warn("%s() 3 timer_name:%s\n", __FUNCTION__, timer_name);
 	if (!of_have_populated_dt()) {
 		r = omap_hwmod_get_resource_byname(oh, IORESOURCE_IRQ, NULL,
 						   &irq);
@@ -286,6 +297,7 @@
 		timer->io_base = ioremap(mem.start, mem.end - mem.start);
 	}
 
+pr_warn("%s() 4 base:%p\n", __FUNCTION__, timer->io_base);
 	if (!timer->io_base)
 		return -ENXIO;
 
@@ -307,6 +319,7 @@
 
 	clk_put(src);
 
+pr_warn("%s() 5\n", __FUNCTION__);
 	omap_hwmod_setup_one(oh_name);
 	omap_hwmod_enable(oh);
 	__omap_dm_timer_init_regs(timer);
@@ -319,6 +332,7 @@
 		return -EINVAL;
 
 	timer->rate = clk_get_rate(timer->fclk);
+pr_warn("%s() 6 rate:%ld\n", __FUNCTION__, timer->rate);
 	timer->reserved = 1;
 
 	return r;
@@ -330,6 +344,7 @@
 {
 	int res;
 
+pr_warn("%s() 0 gptimer_id:%d\n", __FUNCTION__, gptimer_id);
 	clkev.id = gptimer_id;
 	clkev.errata = omap_dm_timer_get_errata();
 
@@ -402,6 +417,7 @@
 	void __iomem *vbase;
 	const char *oh_name = "counter_32k";
 
+pr_warn("%s() 0\n", __FUNCTION__);
 	/*
 	 * If device-tree is present, then search the DT blob
 	 * to see if the 32kHz counter is supported.
@@ -437,6 +453,7 @@
 		return -ENXIO;
 	}
 
+pr_warn("%s() 1 vbase:%p\n", __FUNCTION__, vbase);
 	ret = omap_hwmod_enable(oh);
 	if (ret) {
 		pr_warn("%s: failed to enable counter_32k module (%d)\n",
@@ -463,6 +480,7 @@
 	clksrc.id = gptimer_id;
 	clksrc.errata = omap_dm_timer_get_errata();
 
+pr_warn("%s() 0 id:%d fck_source:%s property:%d\n", __FUNCTION__, gptimer_id, fck_source, property);
 	res = omap_dm_timer_init_one(&clksrc, fck_source, property,
 				     &clocksource_gpt.name,
 				     OMAP_TIMER_NONPOSTED);
@@ -504,6 +522,7 @@
 		pr_err("%s: ioremap failed\n", __func__);
 		return;
 	}
+pr_warn("%s() 0 base:%p\n", __FUNCTION__, base);
 	sys_clk = clk_get(NULL, "sys_clkin");
 	if (IS_ERR(sys_clk)) {
 		pr_err("%s: failed to get system clock handle\n", __func__);
@@ -512,6 +531,7 @@
 	}
 
 	rate = clk_get_rate(sys_clk);
+pr_warn("%s() 1 rate:%ld\n", __FUNCTION__, rate);
 
 	if (soc_is_dra7xx()) {
 		/*
@@ -601,6 +621,7 @@
 			       clksrc_nr, clksrc_src, clksrc_prop)	\
 void __init omap##name##_gptimer_timer_init(void)			\
 {									\
+pr_warn("%s() 0 name:%s clkev_nr:%d clkev_src:%s\n", __FUNCTION__, "##name##", clkev_nr, clkev_src);\
 	omap_clk_init();					\
 	omap_dmtimer_init();						\
 	omap2_gp_clockevent_init((clkev_nr), clkev_src, clkev_prop);	\
@@ -612,6 +633,7 @@
 				clksrc_nr, clksrc_src, clksrc_prop)	\
 void __init omap##name##_sync32k_timer_init(void)		\
 {									\
+pr_warn("%s() 0 name:%s clkev_nr:%d clkev_src:%s\n", __FUNCTION__, "##name##", clkev_nr, clkev_src);\
 	omap_clk_init();					\
 	omap_dmtimer_init();						\
 	omap2_gp_clockevent_init((clkev_nr), clkev_src, clkev_prop);	\
@@ -652,6 +674,7 @@
 static DEFINE_TWD_LOCAL_TIMER(twd_local_timer, OMAP44XX_LOCAL_TWD_BASE, 29);
 void __init omap4_local_timer_init(void)
 {
+//pr_warn("%s() 0\n", __FUNCTION__, base);
 	omap4_sync32k_timer_init();
 	/* Local timers are not supprted on OMAP4430 ES1.0 */
 	if (omap_rev() != OMAP4430_REV_ES1_0) {
@@ -670,6 +693,7 @@
 #else
 void __init omap4_local_timer_init(void)
 {
+pr_warn("%s() 0\n", __FUNCTION__);
 	omap4_sync32k_timer_init();
 }
 #endif /* CONFIG_HAVE_ARM_TWD */
@@ -678,6 +702,7 @@
 #if defined(CONFIG_SOC_OMAP5) || defined(CONFIG_SOC_DRA7XX)
 void __init omap5_realtime_timer_init(void)
 {
+pr_warn("%s() 0\n", __FUNCTION__);
 	omap4_sync32k_timer_init();
 	realtime_counter_init();
 
@@ -707,6 +732,7 @@
 	struct omap_timer_capability_dev_attr *timer_dev_attr;
 
 	pr_debug("%s: %s\n", __func__, oh->name);
+pr_warn("%s() 0 oh->name:%s\n", __FUNCTION__, oh->name);
 
 	/* on secure device, do not register secure timer */
 	timer_dev_attr = oh->dev_attr;
@@ -732,6 +758,7 @@
 	 */
 	sscanf(oh->name, "timer%2d", &id);
 
+pr_warn("%s() 1 timer%d\n", __FUNCTION__, id);
 	if (timer_dev_attr)
 		pdata->timer_capability = timer_dev_attr->timer_capability;
 
@@ -765,6 +792,7 @@
 	if (of_have_populated_dt())
 		return -ENODEV;
 
+pr_warn("%s() 0\n", __FUNCTION__);
 	ret = omap_hwmod_for_each_by_class("timer", omap_timer_init, NULL);
 	if (unlikely(ret)) {
 		pr_err("%s: device registration failed.\n", __func__);
@@ -788,6 +816,7 @@
 {
 	if (!str)
 		return 0;
+pr_warn("%s() 0 str:%s\n", __FUNCTION__, str);
 	/*
 	 * For OMAP architecture, we only have two options
 	 *    - sync_32k (default)
