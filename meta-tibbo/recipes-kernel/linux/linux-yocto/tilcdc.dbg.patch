diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_crtc.c a/drivers/gpu/drm/omapdrm/tilcdc_crtc.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_crtc.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_crtc.c	2016-12-08 18:36:14.648650496 +0300
@@ -276,6 +276,7 @@
 
 	/* Configure the Burst Size and fifo threshold of DMA: */
 	reg = tilcdc_read(dev, LCDC_DMA_CTRL_REG) & ~0x00000770;
+printk(KERN_ERR "%s %s:%d info->dma_burst_sz: %d\n", __FILE__, __FUNC__, __LINE__, info->dma_burst_sz);
 	switch (info->dma_burst_sz) {
 	case 1:
 		reg |= LCDC_DMA_BURST_SIZE(LCDC_DMA_BURST_1);
@@ -308,6 +309,8 @@
 
 	DBG("%dx%d, hbp=%u, hfp=%u, hsw=%u, vbp=%u, vfp=%u, vsw=%u",
 			mode->hdisplay, mode->vdisplay, hbp, hfp, hsw, vbp, vfp, vsw);
+printk(KERN_ERR "%s %s:%d %dx%d, hbp=%u, hfp=%u, hsw=%u, vbp=%u, vfp=%u, vsw=%u\n", __FILE__, __FUNC__, __LINE__, 
+			mode->hdisplay, mode->vdisplay, hbp, hfp, hsw, vbp, vfp, vsw);
 
 	/* Configure the AC Bias Period and Number of Transitions per Interrupt: */
 	reg = tilcdc_read(dev, LCDC_RASTER_TIMING_2_REG) & ~0x000fff00;
@@ -348,9 +351,11 @@
 	 */
 	if (priv->rev == 2) {
 		if ((mode->vdisplay - 1) & 0x400) {
+printk(KERN_ERR "%s %s:%d x01\n", __FILE__, __FUNC__, __LINE__);
 			tilcdc_set(dev, LCDC_RASTER_TIMING_2_REG,
 				LCDC_LPP_B10);
 		} else {
+printk(KERN_ERR "%s %s:%d x02\n", __FILE__, __FUNC__, __LINE__);
 			tilcdc_clear(dev, LCDC_RASTER_TIMING_2_REG,
 				LCDC_LPP_B10);
 		}
@@ -363,10 +368,12 @@
 	reg |= LCDC_TFT_MODE; /* no monochrome/passive support */
 	if (info->tft_alt_mode)
 		reg |= LCDC_TFT_ALT_ENABLE;
+printk(KERN_ERR "%s %s:%d alt:%d\n", __FILE__, __FUNC__, __LINE__, info->tft_alt_mode);
 	if (priv->rev == 2) {
 		unsigned int depth, bpp;
 
 		drm_fb_get_bpp_depth(crtc->primary->fb->pixel_format, &depth, &bpp);
+printk(KERN_ERR "%s %s:%d bpp:%d depth:%d\n", __FILE__, __FUNC__, __LINE__, ppp, depth);
 		switch (bpp) {
 		case 16:
 			break;
@@ -496,31 +503,37 @@
 	vsw = mode->vsync_end - mode->vsync_start;
 
 	if ((hbp-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range0\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Horizontal Back Porch out of range");
 		return MODE_HBLANK_WIDE;
 	}
 
 	if ((hfp-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range1\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Horizontal Front Porch out of range");
 		return MODE_HBLANK_WIDE;
 	}
 
 	if ((hsw-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range2\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Horizontal Sync Width out of range");
 		return MODE_HSYNC_WIDE;
 	}
 
 	if (vbp & ~0xff) {
+printk(KERN_ERR "%s %s:%d range3\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Vertical Back Porch out of range");
 		return MODE_VBLANK_WIDE;
 	}
 
 	if (vfp & ~0xff) {
+printk(KERN_ERR "%s %s:%d range4\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Vertical Front Porch out of range");
 		return MODE_VBLANK_WIDE;
 	}
 
 	if ((vsw-1) & ~0x3f) {
+printk(KERN_ERR "%s %s:%d range5\n", __FILE__, __FUNC__, __LINE__);
 		DBG("Pruning mode: Vertical Sync Width out of range");
 		return MODE_VSYNC_WIDE;
 	}
@@ -593,7 +606,9 @@
 	div = lcd_clk / (crtc->mode.clock * 1000);
 
 	DBG("lcd_clk=%u, mode clock=%d, div=%u", lcd_clk, crtc->mode.clock, div);
+printk(KERN_ERR "%s %s:%d lcd_clk=%u, mode clock=%d, div=%u\n", __FILE__, __FUNC__, __LINE__, lcd_clk, crtc->mode.clock, div);
 	DBG("fck=%lu, dpll_disp_ck=%lu", clk_get_rate(priv->clk), clk_get_rate(priv->disp_clk));
+printk(KERN_ERR "%s %s:%d fck=%lu, dpll_disp_ck=%lu\n", __FILE__, __FUNC__, __LINE__, clk_get_rate(priv->clk), clk_get_rate(priv->disp_clk));
 
 	/* Configure the LCD clock divisor. */
 	tilcdc_write(dev, LCDC_CTRL_REG, LCDC_CLK_DIVISOR(div) |
diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_drv.c a/drivers/gpu/drm/omapdrm/tilcdc_drv.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_drv.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_drv.c	2016-12-08 18:50:50.293654752 +0300
@@ -258,15 +258,19 @@
 	platform_set_drvdata(pdev, dev);
 
 	if (priv->is_componentized) {
+printk(KERN_ERR "%s %s:%d comp0\n", __FILE__, __FUNC__, __LINE__);
 		ret = component_bind_all(dev->dev, dev);
 		if (ret < 0)
 			goto fail_mode_config_cleanup;
 
+printk(KERN_ERR "%s %s:%d r0:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 		ret = tilcdc_add_external_encoders(dev, &bpp);
 		if (ret < 0)
 			goto fail_component_cleanup;
+printk(KERN_ERR "%s %s:%d r1:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	}
 
+printk(KERN_ERR "%s %s:%d N0:%d N1:%d\n", __FILE__, __FUNC__, __LINE__, priv->num_encoders, priv->num_connectors);
 	if ((priv->num_encoders == 0) || (priv->num_connectors == 0)) {
 		dev_err(dev->dev, "no encoders/connectors found\n");
 		ret = -ENXIO;
@@ -294,6 +298,7 @@
 			break;
 	}
 
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNC__, __LINE__, bpp);
 	priv->fbdev = drm_fbdev_cma_init(dev, bpp,
 			dev->mode_config.num_crtc,
 			dev->mode_config.num_connector);
@@ -656,6 +661,7 @@
 	}
 
 	ret = tilcdc_get_external_components(&pdev->dev, &match);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret < 0)
 		return ret;
 	else if (ret == 0)
diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_external.c a/drivers/gpu/drm/omapdrm/tilcdc_external.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_external.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_external.c	2016-12-08 18:56:36.614784953 +0300
@@ -34,6 +34,7 @@
 	int ret, i;
 
 	ret = tilcdc_crtc_mode_valid(priv->crtc, mode);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret != MODE_OK)
 		return ret;
 
@@ -44,6 +45,7 @@
 	BUG_ON(priv->connectors[i] != connector);
 	BUG_ON(!priv->connector_funcs[i]);
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	/* If the connector has its own mode_valid call it. */
 	if (!IS_ERR(priv->connector_funcs[i]) &&
 	    priv->connector_funcs[i]->mode_valid)
@@ -88,6 +90,7 @@
 	drm_connector_helper_add(connector, connector_funcs);
 	priv->num_connectors++;
 
+printk(KERN_ERR "%s %s:%d connected:%s\n", __FILE__, __FUNC__, __LINE__, connector->encoder->name);
 	dev_dbg(dev->dev, "External encoder '%s' connected\n",
 		connector->encoder->name);
 
diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_panel.c a/drivers/gpu/drm/omapdrm/tilcdc_panel.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_panel.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_panel.c	2016-12-08 19:15:49.325843458 +0300
@@ -75,6 +75,7 @@
 		struct drm_display_mode *adjusted_mode)
 {
 	/* nothing needed */
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	return true;
 }
 
@@ -83,6 +84,7 @@
 	struct panel_encoder *panel_encoder = to_panel_encoder(encoder);
 	panel_encoder_dpms(encoder, DRM_MODE_DPMS_OFF);
 	tilcdc_crtc_set_panel_info(encoder->crtc, panel_encoder->mod->info);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 }
 
 static void panel_encoder_commit(struct drm_encoder *encoder)
@@ -94,6 +96,7 @@
 		struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	/* nothing needed */
 }
 
@@ -129,9 +132,11 @@
 
 	ret = drm_encoder_init(dev, encoder, &panel_encoder_funcs,
 			DRM_MODE_ENCODER_LVDS);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret < 0)
 		goto fail;
 
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	drm_encoder_helper_add(encoder, &panel_encoder_helper_funcs);
 
 	return encoder;
@@ -190,6 +195,7 @@
 		if (timings->native_mode == i)
 			mode->type |= DRM_MODE_TYPE_PREFERRED;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 		drm_mode_set_name(mode);
 		drm_mode_probed_add(connector, mode);
 	}
@@ -202,6 +208,7 @@
 {
 	struct tilcdc_drm_private *priv = connector->dev->dev_private;
 	/* our only constraints are what the crtc can generate: */
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	return tilcdc_crtc_mode_valid(priv->crtc, mode);
 }
 
@@ -209,6 +216,7 @@
 		struct drm_connector *connector)
 {
 	struct panel_connector *panel_connector = to_panel_connector(connector);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	return panel_connector->encoder;
 }
 
@@ -251,6 +259,7 @@
 	connector->doublescan_allowed = 0;
 
 	ret = drm_mode_connector_attach_encoder(connector, encoder);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret)
 		goto fail;
 
@@ -275,13 +284,16 @@
 	struct drm_connector *connector;
 
 	encoder = panel_encoder_create(dev, panel_mod);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	if (!encoder)
 		return -ENOMEM;
 
 	connector = panel_connector_create(dev, panel_mod, encoder);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	if (!connector)
 		return -ENOMEM;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	priv->encoders[priv->num_encoders++] = encoder;
 	priv->connectors[priv->num_connectors++] = connector;
 
@@ -331,6 +343,7 @@
 	ret |= of_property_read_u32(info_np, "raster-order", &info->raster_order);
 	ret |= of_property_read_u32(info_np, "fifo-th", &info->fifo_th);
 
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNC__, __LINE__, info->bpp);
 	/* optional: */
 	info->tft_alt_mode      = of_property_read_bool(info_np, "tft-alt-mode");
 	info->invert_pxl_clk    = of_property_read_bool(info_np, "invert-pxl-clk");
@@ -365,6 +378,7 @@
 		return -ENOMEM;
 
 	bl_node = of_parse_phandle(node, "backlight", 0);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	if (bl_node) {
 		panel_mod->backlight = of_find_backlight_by_node(bl_node);
 		of_node_put(bl_node);
@@ -375,6 +389,7 @@
 		dev_info(&pdev->dev, "found backlight\n");
 	}
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	panel_mod->enable_gpio = devm_gpiod_get_optional(&pdev->dev, "enable",
 							 GPIOD_OUT_LOW);
 	if (IS_ERR(panel_mod->enable_gpio)) {
@@ -410,6 +425,7 @@
 	}
 
 	mod->preferred_bpp = panel_mod->info->bpp;
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNC__, __LINE__, mod->preferred_bpp);
 
 	return 0;
 
diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_slave_compat.c a/drivers/gpu/drm/omapdrm/tilcdc_slave_compat.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_slave_compat.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_slave_compat.c	2016-12-08 19:03:34.002314521 +0300
@@ -215,22 +215,26 @@
 	if (!slave || !of_device_is_available(lcdc))
 		goto out;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	i2c = of_parse_phandle(slave, "i2c", 0);
 	if (!i2c) {
 		pr_err("%s: Can't find i2c node trough phandle\n", __func__);
 		goto out;
 	}
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	overlay = tilcdc_get_overlay(&kft);
 	if (!overlay)
 		goto out;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	encoder = of_find_matching_node(overlay, tilcdc_tda998x_of_match);
 	if (!encoder) {
 		pr_err("%s: Failed to find tda998x node\n", __func__);
 		goto out;
 	}
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	tilcdc_copy_props(slave, encoder, tilcdc_slave_props, &kft);
 
 	for_each_child_of_node(overlay, fragment) {
@@ -247,6 +251,7 @@
 
 	tilcdc_node_disable(slave);
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	ret = of_overlay_create(overlay);
 	if (ret)
 		pr_err("%s: Creating overlay failed: %d\n", __func__, ret);
diff -ur a/drivers/gpu/drm/omapdrm/tilcdc_tfp410.c a/drivers/gpu/drm/omapdrm/tilcdc_tfp410.c
--- a/drivers/gpu/drm/omapdrm/tilcdc_tfp410.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/omapdrm/tilcdc_tfp410.c	2016-12-08 19:08:09.635352671 +0300
@@ -139,6 +139,7 @@
 
 	ret = drm_encoder_init(dev, encoder, &tfp410_encoder_funcs,
 			DRM_MODE_ENCODER_TMDS);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret < 0)
 		goto fail;
 
@@ -259,6 +260,7 @@
 	connector->doublescan_allowed = 0;
 
 	ret = drm_mode_connector_attach_encoder(connector, encoder);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNC__, __LINE__, ret);
 	if (ret)
 		goto fail;
 
@@ -282,14 +284,17 @@
 	struct drm_encoder *encoder;
 	struct drm_connector *connector;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	encoder = tfp410_encoder_create(dev, tfp410_mod);
 	if (!encoder)
 		return -ENOMEM;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	connector = tfp410_connector_create(dev, tfp410_mod, encoder);
 	if (!connector)
 		return -ENOMEM;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	priv->encoders[priv->num_encoders++] = encoder;
 	priv->connectors[priv->num_connectors++] = connector;
 
@@ -331,16 +336,19 @@
 
 	tilcdc_module_init(mod, "tfp410", &tfp410_module_ops);
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
 	if (IS_ERR(pinctrl))
 		dev_warn(&pdev->dev, "pins are not configured\n");
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	if (of_property_read_u32(node, "i2c", &i2c_phandle)) {
 		dev_err(&pdev->dev, "could not get i2c bus phandle\n");
 		goto fail;
 	}
 
 	mod->preferred_bpp = dvi_info.bpp;
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNC__, __LINE__, dvi_info.bpp);
 
 	i2c_node = of_find_node_by_phandle(i2c_phandle);
 	if (!i2c_node) {
@@ -348,6 +356,7 @@
 		goto fail;
 	}
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	tfp410_mod->i2c = of_find_i2c_adapter_by_node(i2c_node);
 	if (!tfp410_mod->i2c) {
 		dev_err(&pdev->dev, "could not get i2c\n");
@@ -357,6 +366,7 @@
 
 	of_node_put(i2c_node);
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNC__, __LINE__);
 	tfp410_mod->gpio = of_get_named_gpio_flags(node, "powerdn-gpio",
 			0, NULL);
 	if (IS_ERR_VALUE(tfp410_mod->gpio)) {
