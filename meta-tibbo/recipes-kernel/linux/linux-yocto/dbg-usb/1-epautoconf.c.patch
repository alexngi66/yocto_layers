--- ./drivers/usb/gadget/epautoconf.c	2014-08-19 09:17:53.508978959 +0800
+++ ./drivers/usb/gadget/epautoconf.c	2014-08-19 09:17:14.841771526 +0800
@@ -258,7 +258,9 @@
 	/* First, apply chip-specific "best usage" knowledge.
 	 * This might make a good usb_gadget_ops hook ...
 	 */
+printk( KERN_ERR ": %s 0  :%d\n", __FUNCTION__, desc->wMaxPacketSize);
 	if (gadget_is_net2280 (gadget) && type == USB_ENDPOINT_XFER_INT) {
+printk( KERN_ERR ": %s 0-0:%d\n", __FUNCTION__, desc->wMaxPacketSize);
 		/* ep-e, ep-f are PIO with only 64 byte fifos */
 		ep = find_ep (gadget, "ep-e");
 		if (ep && ep_matches(gadget, ep, desc, ep_comp))
@@ -268,6 +270,7 @@
 			goto found_ep;
 
 	} else if (gadget_is_goku (gadget)) {
+printk( KERN_ERR ": %s 1-0:%d\n", __FUNCTION__, desc->wMaxPacketSize);
 		if (USB_ENDPOINT_XFER_INT == type) {
 			/* single buffering is enough */
 			ep = find_ep(gadget, "ep3-bulk");
@@ -284,6 +287,7 @@
 
 #ifdef CONFIG_BLACKFIN
 	} else if (gadget_is_musbhdrc(gadget)) {
+printk( KERN_ERR ": %s 2-0:%d\n", __FUNCTION__, desc->wMaxPacketSize);
 		if ((USB_ENDPOINT_XFER_BULK == type) ||
 		    (USB_ENDPOINT_XFER_ISOC == type)) {
 			if (USB_DIR_IN & desc->bEndpointAddress)
@@ -301,12 +305,14 @@
 			goto found_ep;
 #endif
 	}
+printk( KERN_ERR ": %s 3-0:%d\n", __FUNCTION__, desc->wMaxPacketSize);
 
 	/* Second, look at endpoints until an unclaimed one looks usable */
 	list_for_each_entry (ep, &gadget->ep_list, ep_list) {
 		if (ep_matches(gadget, ep, desc, ep_comp))
 			goto found_ep;
 	}
+printk( KERN_ERR ": %s 4-0:%d\n", __FUNCTION__, desc->wMaxPacketSize);
 
 	/* Fail */
 	return NULL;
