--- ./drivers/usb/gadget/epautoconf.c	2014-08-13 10:29:49.000000000 +0800
+++ ./drivers/usb/gadget/epautoconf.c	2014-08-13 11:30:01.034268488 +0800
@@ -258,7 +258,9 @@
 	/* First, apply chip-specific "best usage" knowledge.
 	 * This might make a good usb_gadget_ops hook ...
 	 */
+printk( KERN_ERR " THERE %s 0", __FUNCTION__);
 	if (gadget_is_net2280 (gadget) && type == USB_ENDPOINT_XFER_INT) {
+printk( KERN_ERR " THERE %s 1-0", __FUNCTION__);
 		/* ep-e, ep-f are PIO with only 64 byte fifos */
 		ep = find_ep (gadget, "ep-e");
 		if (ep && ep_matches(gadget, ep, desc, ep_comp))
@@ -268,6 +270,7 @@
 			goto found_ep;
 
 	} else if (gadget_is_goku (gadget)) {
+printk( KERN_ERR " THERE %s 1-1", __FUNCTION__);
 		if (USB_ENDPOINT_XFER_INT == type) {
 			/* single buffering is enough */
 			ep = find_ep(gadget, "ep3-bulk");
@@ -284,6 +287,7 @@
 
 #ifdef CONFIG_BLACKFIN
 	} else if (gadget_is_musbhdrc(gadget)) {
+printk( KERN_ERR " THERE %s 2-0", __FUNCTION__);
 		if ((USB_ENDPOINT_XFER_BULK == type) ||
 		    (USB_ENDPOINT_XFER_ISOC == type)) {
 			if (USB_DIR_IN & desc->bEndpointAddress)
@@ -301,6 +305,7 @@
 			goto found_ep;
 #endif
 	}
+printk( KERN_ERR " THERE %s 3-0", __FUNCTION__);
 
 	/* Second, look at endpoints until an unclaimed one looks usable */
 	list_for_each_entry (ep, &gadget->ep_list, ep_list) {
@@ -309,8 +314,10 @@
 	}
 
 	/* Fail */
+printk( KERN_ERR " THERE %s 4-0", __FUNCTION__);
 	return NULL;
 found_ep:
+printk( KERN_ERR " THERE %s 5-0", __FUNCTION__);
 	ep->desc = NULL;
 	ep->comp_desc = NULL;
 	return ep;
