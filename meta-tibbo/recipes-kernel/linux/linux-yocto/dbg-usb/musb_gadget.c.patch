--- ./drivers/usb/musb/musb_gadget.c	2014-08-14 09:48:21.067925201 +0800
+++ ./drivers/usb/musb/musb_gadget.c	2014-08-14 09:49:58.219974723 +0800
@@ -963,6 +963,8 @@
 	unsigned	tmp;
 	int		status = -EINVAL;
 
+printk( KERN_ERR " THERE %s 0", __FUNCTION__);
+	if (!ep || !desc) printk( KERN_ERR " THERE 1!");
 	if (!ep || !desc)
 		return -EINVAL;
 
@@ -981,10 +983,12 @@
 	}
 	musb_ep->type = usb_endpoint_type(desc);
 
+printk( KERN_ERR " THERE %s %d!=%d %d", __FUNCTION__, usb_endpoint_num(desc), epnum, desc->bEndpointAddress);
 	/* check direction and (later) maxpacket size against endpoint */
 	if (usb_endpoint_num(desc) != epnum)
 		goto fail;
 
+printk( KERN_ERR " THERE %s 1 1", __FUNCTION__);
 	/* REVISIT this rules out high bandwidth periodic transfers */
 	tmp = usb_endpoint_maxp(desc);
 	if (tmp & ~0x07ff) {
@@ -1004,6 +1008,7 @@
 		musb_ep->hb_mult = 0;
 	}
 
+printk( KERN_ERR " THERE %s 2", __FUNCTION__);
 	musb_ep->packet_sz = tmp & 0x7ff;
 	tmp = musb_ep->packet_sz * (musb_ep->hb_mult + 1);
 
@@ -1102,6 +1107,7 @@
 	/* NOTE:  all the I/O code _should_ work fine without DMA, in case
 	 * for some reason you run out of channels here.
 	 */
+printk( KERN_ERR " THERE %s 3", __FUNCTION__);
 	if (is_dma_capable() && musb->dma_controller) {
 		struct dma_controller	*c = musb->dma_controller;
 
@@ -1110,6 +1116,7 @@
 	} else
 		musb_ep->dma = NULL;
 
+printk( KERN_ERR " THERE %s 4", __FUNCTION__);
 	musb_ep->desc = desc;
 	musb_ep->busy = 0;
 	musb_ep->wedged = 0;
@@ -1129,6 +1136,7 @@
 	schedule_work(&musb->irq_work);
 
 fail:
+printk( KERN_ERR " THERE %s 5 (f)", __FUNCTION__);
 	spin_unlock_irqrestore(&musb->lock, flags);
 	return status;
 }
