--- a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c	2016-12-08 18:36:14.648650496 +0300
@@ -276,6 +276,7 @@
 
 	/* Configure the Burst Size and fifo threshold of DMA: */
 	reg = tilcdc_read(dev, LCDC_DMA_CTRL_REG) & ~0x00000770;
+ printk(KERN_ERR "%s %s:%d info->dma_burst_sz: %d\n", __FILE__, __FUNCTION__, __LINE__, info->dma_burst_sz);
 	switch (info->dma_burst_sz) {
 	case 1:
 		reg |= LCDC_DMA_BURST_SIZE(LCDC_DMA_BURST_1);
@@ -308,6 +309,8 @@
 
 	DBG("%dx%d, hbp=%u, hfp=%u, hsw=%u, vbp=%u, vfp=%u, vsw=%u",
 			mode->hdisplay, mode->vdisplay, hbp, hfp, hsw, vbp, vfp, vsw);
+printk(KERN_ERR "%s %s:%d %dx%d, hbp=%u, hfp=%u, hsw=%u, vbp=%u, vfp=%u, vsw=%u\n", __FILE__, __FUNCTION__, __LINE__, \
+			mode->hdisplay, mode->vdisplay, hbp, hfp, hsw, vbp, vfp, vsw);
 
 	/* Configure the AC Bias Period and Number of Transitions per Interrupt: */
 	reg = tilcdc_read(dev, LCDC_RASTER_TIMING_2_REG) & ~0x000fff00;
@@ -348,9 +351,11 @@
 	 */
 	if (priv->rev == 2) {
 		if ((mode->vdisplay - 1) & 0x400) {
+printk(KERN_ERR "%s %s:%d x01\n", __FILE__, __FUNCTION__, __LINE__);
 			tilcdc_set(dev, LCDC_RASTER_TIMING_2_REG,
 				LCDC_LPP_B10);
 		} else {
+printk(KERN_ERR "%s %s:%d x02\n", __FILE__, __FUNCTION__, __LINE__);
 			tilcdc_clear(dev, LCDC_RASTER_TIMING_2_REG,
 				LCDC_LPP_B10);
 		}
@@ -363,10 +368,12 @@
 	reg |= LCDC_TFT_MODE; /* no monochrome/passive support */
 	if (info->tft_alt_mode)
 		reg |= LCDC_TFT_ALT_ENABLE;
+printk(KERN_ERR "%s %s:%d alt:%d\n", __FILE__, __FUNCTION__, __LINE__, info->tft_alt_mode);
 	if (priv->rev == 2) {
 		unsigned int depth, bpp;
 
 		drm_fb_get_bpp_depth(crtc->primary->fb->pixel_format, &depth, &bpp);
+printk(KERN_ERR "%s %s:%d bpp:%d depth:%d\n", __FILE__, __FUNCTION__, __LINE__, bpp, depth);
 		switch (bpp) {
 		case 16:
 			break;
@@ -496,31 +503,37 @@
 	vsw = mode->vsync_end - mode->vsync_start;
 
 	if ((hbp-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range0\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Horizontal Back Porch out of range");
 		return MODE_HBLANK_WIDE;
 	}
 
 	if ((hfp-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range1\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Horizontal Front Porch out of range");
 		return MODE_HBLANK_WIDE;
 	}
 
 	if ((hsw-1) & ~0x3ff) {
+printk(KERN_ERR "%s %s:%d range2\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Horizontal Sync Width out of range");
 		return MODE_HSYNC_WIDE;
 	}
 
 	if (vbp & ~0xff) {
+printk(KERN_ERR "%s %s:%d range3\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Vertical Back Porch out of range");
 		return MODE_VBLANK_WIDE;
 	}
 
 	if (vfp & ~0xff) {
+printk(KERN_ERR "%s %s:%d range4\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Vertical Front Porch out of range");
 		return MODE_VBLANK_WIDE;
 	}
 
 	if ((vsw-1) & ~0x3f) {
+printk(KERN_ERR "%s %s:%d range5\n", __FILE__, __FUNCTION__, __LINE__);
 		DBG("Pruning mode: Vertical Sync Width out of range");
 		return MODE_VSYNC_WIDE;
 	}
@@ -593,7 +606,9 @@
 	div = lcd_clk / (crtc->mode.clock * 1000);
 
 	DBG("lcd_clk=%u, mode clock=%d, div=%u", lcd_clk, crtc->mode.clock, div);
+printk(KERN_ERR "%s %s:%d lcd_clk=%u, mode clock=%d, div=%u\n", __FILE__, __FUNCTION__, __LINE__, lcd_clk, crtc->mode.clock, div);
 	DBG("fck=%lu, dpll_disp_ck=%lu", clk_get_rate(priv->clk), clk_get_rate(priv->disp_clk));
+printk(KERN_ERR "%s %s:%d fck=%lu, dpll_disp_ck=%lu\n", __FILE__, __FUNCTION__, __LINE__, clk_get_rate(priv->clk), clk_get_rate(priv->disp_clk));
 
 	/* Configure the LCD clock divisor. */
 	tilcdc_write(dev, LCDC_CTRL_REG, LCDC_CLK_DIVISOR(div) |
