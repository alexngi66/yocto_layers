--- a/drivers/gpu/drm/tilcdc/tilcdc_panel.c	2016-12-08 15:13:00.000000000 +0300
+++ a/drivers/gpu/drm/tilcdc/tilcdc_panel.c	2016-12-08 19:15:49.325843458 +0300
@@ -75,6 +75,7 @@
 		struct drm_display_mode *adjusted_mode)
 {
 	/* nothing needed */
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	return true;
 }
 
@@ -83,6 +84,7 @@
 	struct panel_encoder *panel_encoder = to_panel_encoder(encoder);
 	panel_encoder_dpms(encoder, DRM_MODE_DPMS_OFF);
 	tilcdc_crtc_set_panel_info(encoder->crtc, panel_encoder->mod->info);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 }
 
 static void panel_encoder_commit(struct drm_encoder *encoder)
@@ -94,6 +96,7 @@
 		struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
+printk(KERN_ERR "%s %s:%d %s->%s\n", __FILE__, __FUNCTION__, __LINE__, mode->name, adjusted_mode->name);
 	/* nothing needed */
 }
 
@@ -129,9 +132,11 @@
 
 	ret = drm_encoder_init(dev, encoder, &panel_encoder_funcs,
 			DRM_MODE_ENCODER_LVDS);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNCTION__, __LINE__, ret);
 	if (ret < 0)
 		goto fail;
 
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNCTION__, __LINE__, ret);
 	drm_encoder_helper_add(encoder, &panel_encoder_helper_funcs);
 
 	return encoder;
@@ -190,6 +195,7 @@
 		if (timings->native_mode == i)
 			mode->type |= DRM_MODE_TYPE_PREFERRED;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 		drm_mode_set_name(mode);
 		drm_mode_probed_add(connector, mode);
 	}
@@ -202,6 +208,7 @@
 {
 	struct tilcdc_drm_private *priv = connector->dev->dev_private;
 	/* our only constraints are what the crtc can generate: */
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	return tilcdc_crtc_mode_valid(priv->crtc, mode);
 }
 
@@ -209,6 +216,7 @@
 		struct drm_connector *connector)
 {
 	struct panel_connector *panel_connector = to_panel_connector(connector);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	return panel_connector->encoder;
 }
 
@@ -251,6 +259,7 @@
 	connector->doublescan_allowed = 0;
 
 	ret = drm_mode_connector_attach_encoder(connector, encoder);
+printk(KERN_ERR "%s %s:%d ret:%d\n", __FILE__, __FUNCTION__, __LINE__, ret);
 	if (ret)
 		goto fail;
 
@@ -275,13 +284,16 @@
 	struct drm_connector *connector;
 
 	encoder = panel_encoder_create(dev, panel_mod);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	if (!encoder)
 		return -ENOMEM;
 
 	connector = panel_connector_create(dev, panel_mod, encoder);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	if (!connector)
 		return -ENOMEM;
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	priv->encoders[priv->num_encoders++] = encoder;
 	priv->connectors[priv->num_connectors++] = connector;
 
@@ -331,6 +343,7 @@
 	ret |= of_property_read_u32(info_np, "raster-order", &info->raster_order);
 	ret |= of_property_read_u32(info_np, "fifo-th", &info->fifo_th);
 
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNCTION__, __LINE__, info->bpp);
 	/* optional: */
 	info->tft_alt_mode      = of_property_read_bool(info_np, "tft-alt-mode");
 	info->invert_pxl_clk    = of_property_read_bool(info_np, "invert-pxl-clk");
@@ -365,6 +378,7 @@
 		return -ENOMEM;
 
 	bl_node = of_parse_phandle(node, "backlight", 0);
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	if (bl_node) {
 		panel_mod->backlight = of_find_backlight_by_node(bl_node);
 		of_node_put(bl_node);
@@ -375,6 +389,7 @@
 		dev_info(&pdev->dev, "found backlight\n");
 	}
 
+printk(KERN_ERR "%s %s:%d\n", __FILE__, __FUNCTION__, __LINE__);
 	panel_mod->enable_gpio = devm_gpiod_get_optional(&pdev->dev, "enable",
 							 GPIOD_OUT_LOW);
 	if (IS_ERR(panel_mod->enable_gpio)) {
@@ -410,6 +425,7 @@
 	}
 
 	mod->preferred_bpp = panel_mod->info->bpp;
+printk(KERN_ERR "%s %s:%d bpp:%d\n", __FILE__, __FUNCTION__, __LINE__, mod->preferred_bpp);
 
 	return 0;
 
