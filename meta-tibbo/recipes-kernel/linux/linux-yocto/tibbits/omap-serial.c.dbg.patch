--- a/drivers/tty/serial/omap-serial.c	2016-07-12 17:55:06.000000000 +0300
+++ a/drivers/tty/serial/omap-serial.c	2016-07-12 17:57:08.122954296 +0300
@@ -318,10 +318,12 @@
 			serial_out(up, UART_OMAP_SCR, up->scr);
 			res = (port->rs485.flags & SER_RS485_RTS_AFTER_SEND) ?
 				1 : 0;
+dev_warn(up->dev, "%s: %d\n", __FUNCTION__, res);
 			if (gpio_get_value(up->rts_gpio) != res) {
 				if (port->rs485.delay_rts_after_send > 0)
 					mdelay(
 					port->rs485.delay_rts_after_send);
+dev_warn(up->dev, "%s: (2) %d\n", __FUNCTION__, res);
 				gpio_set_value(up->rts_gpio, res);
 			}
 		} else {
@@ -427,7 +429,9 @@
 
 		/* if rts not already enabled */
 		res = (port->rs485.flags & SER_RS485_RTS_ON_SEND) ? 1 : 0;
+dev_warn(up->dev, "%s: %d\n", __FUNCTION__, res);
 		if (gpio_get_value(up->rts_gpio) != res) {
+dev_warn(up->dev, "%s: (1) %d\n", __FUNCTION__, res);
 			gpio_set_value(up->rts_gpio, res);
 			if (port->rs485.delay_rts_before_send > 0)
 				mdelay(port->rs485.delay_rts_before_send);
@@ -691,6 +695,7 @@
 		     UART_MCR_DTR | UART_MCR_RTS);
 	up->mcr = old_mcr | mcr;
 	serial_out(up, UART_MCR, up->mcr);
+dev_warn(up->dev, "%s(0): cur mcr: %d\n", __FUNCTION__, ( up->mcr | UART_MCR_RTS));
 
 	/* Turn off autoRTS if RTS is lowered; restore autoRTS if RTS raised */
 	lcr = serial_in(up, UART_LCR);
@@ -699,6 +704,7 @@
 		up->efr |= UART_EFR_RTS;
 	else
 		up->efr &= UART_EFR_RTS;
+//dev_warn(up->dev, "%s(0): cur efr: %d\n", __FUNCTION__, ( up->efr | UART_EFR_RTS));
 	serial_out(up, UART_EFR, up->efr);
 	serial_out(up, UART_LCR, lcr);
 
@@ -1052,15 +1058,18 @@
 	up->port.status &= ~(UPSTAT_AUTOCTS | UPSTAT_AUTORTS | UPSTAT_AUTOXOFF);
 
 	if (termios->c_cflag & CRTSCTS && up->port.flags & UPF_HARD_FLOW) {
+//dev_warn(up->dev, "%s(0): autorts\n", __FUNCTION__);
 		/* Enable AUTOCTS (autoRTS is enabled when RTS is raised) */
 		up->port.status |= UPSTAT_AUTOCTS | UPSTAT_AUTORTS;
 		up->efr |= UART_EFR_CTS;
 	} else {
+//dev_warn(up->dev, "%s(0): no autorts\n", __FUNCTION__);
 		/* Disable AUTORTS and AUTOCTS */
 		up->efr &= ~(UART_EFR_CTS | UART_EFR_RTS);
 	}
 
 	if (up->port.flags & UPF_SOFT_FLOW) {
+//dev_warn(up->dev, "%s(0): softflow\n", __FUNCTION__);
 		/* clear SW control mode bits */
 		up->efr &= OMAP_UART_SW_CLR;
 
@@ -1376,7 +1385,9 @@
 		/* enable / disable rts */
 		val = (port->rs485.flags & SER_RS485_ENABLED) ?
 			SER_RS485_RTS_AFTER_SEND : SER_RS485_RTS_ON_SEND;
+dev_warn(up->dev, "%s(0): %d\n", __FUNCTION__, val);
 		val = (port->rs485.flags & val) ? 1 : 0;
+dev_warn(up->dev, "%s(1): %d\n", __FUNCTION__, val);
 		gpio_set_value(up->rts_gpio, val);
 	} else
 		port->rs485.flags &= ~SER_RS485_ENABLED;
@@ -1396,16 +1407,19 @@
 
 	/* set gpio lines is defined */
 	if ( port->rs485.flags & SER_RS485_ENABLED) {
+dev_warn(up->dev, "%s: 485\n", __FUNCTION__);
 	  /* 485 */
 	  if ( gpio_is_valid( up->gpio_a)) gpio_set_value( up->gpio_a, 0);
 	  if ( gpio_is_valid( up->gpio_b)) gpio_set_value( up->gpio_b, 1);
 	  if ( gpio_is_valid( up->gpio_c)) gpio_set_value( up->gpio_c, 1);
 	} else if ( port->rs485.flags & ( SER_RS485_ENABLED << 5)) {
+dev_warn(up->dev, "%s: 422\n", __FUNCTION__);
 	  /* 422 */
 	  if ( gpio_is_valid( up->gpio_a)) gpio_set_value( up->gpio_a, 1);
 	  if ( gpio_is_valid( up->gpio_b)) gpio_set_value( up->gpio_b, 1);
 	  if ( gpio_is_valid( up->gpio_c)) gpio_set_value( up->gpio_c, 1);
 	} else {
+dev_warn(up->dev, "%s: 232\n", __FUNCTION__);
 	  /* 232 */
 	  if ( gpio_is_valid( up->gpio_a)) gpio_set_value( up->gpio_a, 1);
 	  if ( gpio_is_valid( up->gpio_b)) gpio_set_value( up->gpio_b, 0);
@@ -1589,6 +1603,8 @@
 	else
 		rs485conf->flags |= SER_RS485_RTS_AFTER_SEND;
 
+if ( ( rs485conf->flags | SER_RS485_RTS_ON_SEND)) dev_warn(up->dev, "%s: 485: rtsonsend\n", __FUNCTION__);
+if ( ( rs485conf->flags | SER_RS485_RTS_AFTER_SEND)) dev_warn(up->dev, "%s: 485: rtsaftersend\n", __FUNCTION__);
 	/* check for tx enable gpio */
 	up->rts_gpio = of_get_named_gpio_flags(np, "rts-gpio", 0, &flags);
 	if (gpio_is_valid(up->rts_gpio)) {
