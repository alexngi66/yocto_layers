--- a/drivers/usb/core/usb.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/core/usb.c	2018-11-12 06:42:55.000000000 +0300
@@ -45,9 +45,34 @@
 #include <linux/scatterlist.h>
 #include <linux/mm.h>
 #include <linux/dma-mapping.h>
+#include <asm/uaccess.h>
+#include <linux/proc_fs.h>
+
 
 #include "usb.h"
 
+#ifdef CONFIG_USB_LOGO_TEST
+#include <linux/uaccess.h>
+#include <linux/proc_fs.h>
+#include <linux/usb/sp_usb.h>
+
+#define COMPARE_CHAR_NUMBER		3
+#define BASIC_VALUE			10
+#define LIMITS_OF_AUTHORITY		0666
+#define MAX_LENGTH			64
+#define DIRECTIORY_NAME			"usb_verify_test"
+#define TESET_FLAG_FILE_NAME		"specific_test_set"
+#define HUB_LEVLE_FILE_NAME		"hub_level_set"
+
+bool tid_test_flag = false;
+u8 max_topo_level = 6;
+static struct proc_dir_entry *dir_entry;
+static struct proc_dir_entry *test_flag_entry;
+static struct proc_dir_entry *hub_level_entry;
+EXPORT_SYMBOL_GPL(tid_test_flag);
+EXPORT_SYMBOL_GPL(max_topo_level);
+#endif
+
 
 const char *usbcore_name = "usbcore";
 
@@ -595,7 +620,9 @@
 	dev->state = USB_STATE_ATTACHED;
 	dev->lpm_disable_count = 1;
 	atomic_set(&dev->urbnum, 0);
-
+#ifdef CONFIG_RETRY_TIMES
+	dev->reset_count = 5;
+#endif
 	INIT_LIST_HEAD(&dev->ep0.urb_list);
 	dev->ep0.desc.bLength = USB_DT_ENDPOINT_SIZE;
 	dev->ep0.desc.bDescriptorType = USB_DT_ENDPOINT;
@@ -1197,8 +1224,157 @@
 /*
  * Init
  */
+
+
+#ifdef CONFIG_USB_LOGO_TEST
+static int usb_specific_test_set_show(struct seq_file *m, void *v)
+{
+	return 0;
+}
+
+static int usb_specific_test_set_write(struct file *file,
+				const char __user *buf, size_t count, loff_t *data)
+{
+	char verify_parameter[MAX_LENGTH];
+
+	if (count > MAX_LENGTH)
+		count = MAX_LENGTH;
+
+	printk(KERN_DEBUG "USB verify parameters set\n");
+	memset(verify_parameter, 0, MAX_LENGTH);
+	if (copy_from_user(verify_parameter, buf, count))
+		return -EFAULT;
+
+	if (strncmp(verify_parameter, "ORI", COMPARE_CHAR_NUMBER) == 0) {
+		printk(KERN_DEBUG "recover to origin set\n");
+		tid_test_flag = false;
+	} else if (strncmp(verify_parameter, "TID", COMPARE_CHAR_NUMBER) == 0) {
+		printk(KERN_DEBUG "comfs to comhs test set\n");
+		tid_test_flag = true;
+	} else if (strncmp(verify_parameter, "MFI", COMPARE_CHAR_NUMBER) == 0) {
+		printk(KERN_DEBUG "comfs to comhs test set\n");
+		tid_test_flag = true;
+	} else {
+		printk(KERN_DEBUG "now, not support value:%s\n",verify_parameter);
+	}
+
+	return count;
+}
+
+static int usb_specific_test_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, usb_specific_test_set_show, NULL);
+}
+
+static const struct file_operations usb_specific_test_proc_fops = {
+	.owner		= THIS_MODULE,
+	.open		= usb_specific_test_proc_open,
+	.read		= seq_read,
+	.write		= usb_specific_test_set_write,
+	.release	= single_release,
+};
+
+static int usb_hub_level_set_show(struct seq_file *m, void *v)
+{
+	int len;
+	char verify_parameter[MAX_LENGTH];
+
+	printk(KERN_DEBUG "+%s\n", __FUNCTION__);
+	memset(verify_parameter, 0, sizeof(verify_parameter));
+	len = num_to_str(verify_parameter,MAX_LENGTH,max_topo_level);
+	if (!len)
+		printk(KERN_NOTICE "num_to_str error\n");
+	else
+		seq_printf(m, "%s\n", verify_parameter);
+
+	return 0;
+}
+
+static int usb_hub_level_set_write(struct file *file,
+				const char __user *buf, size_t count, loff_t *data)
+{
+	u64 value;
+	char verify_parameter[MAX_LENGTH];
+
+	if (count > MAX_LENGTH)
+		count = MAX_LENGTH;
+
+	printk(KERN_DEBUG "+%s\n", __FUNCTION__);
+	memset(verify_parameter, 0, MAX_LENGTH);
+	if (copy_from_user(verify_parameter, buf, count))
+		return -EFAULT;
+
+	value = simple_strtoull(verify_parameter, NULL, BASIC_VALUE);
+	max_topo_level = value;
+	printk(KERN_DEBUG "USB verify max hub level value:%d\n", max_topo_level);
+
+	return count;
+}
+
+static int usb_hub_level_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, usb_hub_level_set_show, NULL);
+}
+
+static const struct file_operations hub_level_proc_fops = {
+	.owner		= THIS_MODULE,
+	.open		= usb_hub_level_proc_open,
+	.read		= seq_read,
+	.write		= usb_hub_level_set_write,
+	.release	= single_release,
+};
+
+static int proc_entry_add(void)
+{
+	dir_entry = proc_mkdir(DIRECTIORY_NAME, NULL);
+	if (!dir_entry) {
+		printk(KERN_NOTICE "can't create /proc/usb_verify_test\n");
+		return -ENOMEM;
+	}
+
+	test_flag_entry = proc_create(TESET_FLAG_FILE_NAME, LIMITS_OF_AUTHORITY,
+				      dir_entry, &usb_specific_test_proc_fops);
+	if (!test_flag_entry) {
+		printk(KERN_NOTICE
+		       "can't create /proc/usb_verify_test/specific_test_set\n");
+		remove_proc_entry(TESET_FLAG_FILE_NAME, dir_entry);
+		return -ENOMEM;
+	}
+
+	hub_level_entry = proc_create(HUB_LEVLE_FILE_NAME, LIMITS_OF_AUTHORITY,
+				      dir_entry, &hub_level_proc_fops);
+	if (!hub_level_entry) {
+		printk(KERN_NOTICE
+		       "can't create /proc/usb_verify_test/hub_level_set\n");
+		remove_proc_entry(HUB_LEVLE_FILE_NAME, dir_entry);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static void proc_entry_remove(void)
+{
+	remove_proc_entry(TESET_FLAG_FILE_NAME, dir_entry);
+	remove_proc_entry(HUB_LEVLE_FILE_NAME, dir_entry);
+	remove_proc_entry(DIRECTIORY_NAME, NULL);
+}
+#endif
+
+static void sp_get_port_state(void)
+{
+#ifdef CONFIG_USB_PORT0
+	sp_port_enabled |= 0x01;
+#endif
+
+#ifdef CONFIG_USB_PORT1
+	sp_port_enabled |= 0x02;
+#endif
+}
+
 static int __init usb_init(void)
 {
+	int i;
 	int retval;
 	if (usb_disabled()) {
 		pr_info("%s: USB support disabled\n", usbcore_name);
@@ -1206,6 +1382,12 @@
 	}
 	usb_init_pool_max();
 
+#ifdef CONFIG_USB_LOGO_TEST
+	retval = proc_entry_add();
+	if (retval)
+		goto out;
+#endif
+
 	retval = usb_debugfs_init();
 	if (retval)
 		goto out;
@@ -1230,8 +1412,20 @@
 	if (retval)
 		goto hub_init_failed;
 	retval = usb_register_device_driver(&usb_generic_driver, THIS_MODULE);
-	if (!retval)
+	if (!retval){
+		for (i = 0; i < USB_PORT_NUM; i++) {
+			sema_init(&enum_rx_active_reset_sem[i], 0);
+		}
+#ifdef CONFIG_GADGET_USB0
+		accessory_port_id = USB_PORT0_ID;
+#else
+		accessory_port_id = USB_PORT1_ID;
+#endif
+		printk(KERN_NOTICE "usb acc config port= %d\n",accessory_port_id);
+		sp_get_port_state();
+
 		goto out;
+	}
 
 	usb_hub_cleanup();
 hub_init_failed:
@@ -1260,6 +1454,9 @@
 	if (usb_disabled())
 		return;
 
+#ifdef CONFIG_USB_LOGO_TEST
+	proc_entry_remove();
+#endif
 	usb_deregister_device_driver(&usb_generic_driver);
 	usb_major_cleanup();
 	usb_deregister(&usbfs_driver);
