--- a/drivers/usb/gadget/function/f_sourcesink.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/gadget/function/f_sourcesink.c	2018-11-12 06:42:55.000000000 +0300
@@ -16,11 +16,9 @@
 #include <linux/kernel.h>
 #include <linux/device.h>
 #include <linux/module.h>
-#include <linux/usb/composite.h>
-#include <linux/err.h>
 
 #include "g_zero.h"
-#include "u_f.h"
+
 
 /*
  * SOURCE/SINK FUNCTION ... a primary testing vehicle for USB peripheral
@@ -34,24 +32,24 @@
  * plus two that support control-OUT tests.  If the optional "autoresume"
  * mode is enabled, it provides good functional coverage for the "USBCV"
  * test harness from USB-IF.
+ *
+ * Note that because this doesn't queue more than one request at a time,
+ * some other function must be used to test queueing logic.  The network
+ * link (g_ether) is the best overall option for that, since its TX and RX
+ * queues are relatively independent, will receive a range of packet sizes,
+ * and can often be made to run out completely.  Those issues are important
+ * when stress testing peripheral controller drivers.
+ *
+ *
+ * This is currently packaged as a configuration driver, which can't be
+ * combined with other functions to make composite devices.  However, it
+ * can be combined with other independent configurations.
  */
 struct f_sourcesink {
 	struct usb_function	function;
 
 	struct usb_ep		*in_ep;
 	struct usb_ep		*out_ep;
-	struct usb_ep		*iso_in_ep;
-	struct usb_ep		*iso_out_ep;
-	int			cur_alt;
-
-	unsigned pattern;
-	unsigned isoc_interval;
-	unsigned isoc_maxpacket;
-	unsigned isoc_mult;
-	unsigned isoc_maxburst;
-	unsigned buflen;
-	unsigned bulk_qlen;
-	unsigned iso_qlen;
 };
 
 static inline struct f_sourcesink *func_to_ss(struct usb_function *f)
@@ -59,26 +57,19 @@
 	return container_of(f, struct f_sourcesink, function);
 }
 
+static unsigned pattern;
+module_param(pattern, uint, 0644);
+MODULE_PARM_DESC(pattern, "0 = all zeroes, 1 = mod63 ");
+
 /*-------------------------------------------------------------------------*/
 
-static struct usb_interface_descriptor source_sink_intf_alt0 = {
-	.bLength =		USB_DT_INTERFACE_SIZE,
+static struct usb_interface_descriptor source_sink_intf = {
+	.bLength =		sizeof source_sink_intf,
 	.bDescriptorType =	USB_DT_INTERFACE,
 
-	.bAlternateSetting =	0,
 	.bNumEndpoints =	2,
 	.bInterfaceClass =	USB_CLASS_VENDOR_SPEC,
-	/* .iInterface		= DYNAMIC */
-};
-
-static struct usb_interface_descriptor source_sink_intf_alt1 = {
-	.bLength =		USB_DT_INTERFACE_SIZE,
-	.bDescriptorType =	USB_DT_INTERFACE,
-
-	.bAlternateSetting =	1,
-	.bNumEndpoints =	4,
-	.bInterfaceClass =	USB_CLASS_VENDOR_SPEC,
-	/* .iInterface		= DYNAMIC */
+	/* .iInterface = DYNAMIC */
 };
 
 /* full speed support: */
@@ -99,36 +90,10 @@
 	.bmAttributes =		USB_ENDPOINT_XFER_BULK,
 };
 
-static struct usb_endpoint_descriptor fs_iso_source_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bEndpointAddress =	USB_DIR_IN,
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1023),
-	.bInterval =		4,
-};
-
-static struct usb_endpoint_descriptor fs_iso_sink_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bEndpointAddress =	USB_DIR_OUT,
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1023),
-	.bInterval =		4,
-};
-
 static struct usb_descriptor_header *fs_source_sink_descs[] = {
-	(struct usb_descriptor_header *) &source_sink_intf_alt0,
-	(struct usb_descriptor_header *) &fs_sink_desc,
-	(struct usb_descriptor_header *) &fs_source_desc,
-	(struct usb_descriptor_header *) &source_sink_intf_alt1,
-#define FS_ALT_IFC_1_OFFSET	3
+	(struct usb_descriptor_header *) &source_sink_intf,
 	(struct usb_descriptor_header *) &fs_sink_desc,
 	(struct usb_descriptor_header *) &fs_source_desc,
-	(struct usb_descriptor_header *) &fs_iso_sink_desc,
-	(struct usb_descriptor_header *) &fs_iso_source_desc,
 	NULL,
 };
 
@@ -150,34 +115,10 @@
 	.wMaxPacketSize =	cpu_to_le16(512),
 };
 
-static struct usb_endpoint_descriptor hs_iso_source_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1024),
-	.bInterval =		4,
-};
-
-static struct usb_endpoint_descriptor hs_iso_sink_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1024),
-	.bInterval =		4,
-};
-
 static struct usb_descriptor_header *hs_source_sink_descs[] = {
-	(struct usb_descriptor_header *) &source_sink_intf_alt0,
+	(struct usb_descriptor_header *) &source_sink_intf,
 	(struct usb_descriptor_header *) &hs_source_desc,
 	(struct usb_descriptor_header *) &hs_sink_desc,
-	(struct usb_descriptor_header *) &source_sink_intf_alt1,
-#define HS_ALT_IFC_1_OFFSET	3
-	(struct usb_descriptor_header *) &hs_source_desc,
-	(struct usb_descriptor_header *) &hs_sink_desc,
-	(struct usb_descriptor_header *) &hs_iso_source_desc,
-	(struct usb_descriptor_header *) &hs_iso_sink_desc,
 	NULL,
 };
 
@@ -191,10 +132,9 @@
 	.wMaxPacketSize =	cpu_to_le16(1024),
 };
 
-static struct usb_ss_ep_comp_descriptor ss_source_comp_desc = {
+struct usb_ss_ep_comp_descriptor ss_source_comp_desc = {
 	.bLength =		USB_DT_SS_EP_COMP_SIZE,
 	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
-
 	.bMaxBurst =		0,
 	.bmAttributes =		0,
 	.wBytesPerInterval =	0,
@@ -208,67 +148,20 @@
 	.wMaxPacketSize =	cpu_to_le16(1024),
 };
 
-static struct usb_ss_ep_comp_descriptor ss_sink_comp_desc = {
+struct usb_ss_ep_comp_descriptor ss_sink_comp_desc = {
 	.bLength =		USB_DT_SS_EP_COMP_SIZE,
 	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
-
 	.bMaxBurst =		0,
 	.bmAttributes =		0,
 	.wBytesPerInterval =	0,
 };
 
-static struct usb_endpoint_descriptor ss_iso_source_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1024),
-	.bInterval =		4,
-};
-
-static struct usb_ss_ep_comp_descriptor ss_iso_source_comp_desc = {
-	.bLength =		USB_DT_SS_EP_COMP_SIZE,
-	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
-
-	.bMaxBurst =		0,
-	.bmAttributes =		0,
-	.wBytesPerInterval =	cpu_to_le16(1024),
-};
-
-static struct usb_endpoint_descriptor ss_iso_sink_desc = {
-	.bLength =		USB_DT_ENDPOINT_SIZE,
-	.bDescriptorType =	USB_DT_ENDPOINT,
-
-	.bmAttributes =		USB_ENDPOINT_XFER_ISOC,
-	.wMaxPacketSize =	cpu_to_le16(1024),
-	.bInterval =		4,
-};
-
-static struct usb_ss_ep_comp_descriptor ss_iso_sink_comp_desc = {
-	.bLength =		USB_DT_SS_EP_COMP_SIZE,
-	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
-
-	.bMaxBurst =		0,
-	.bmAttributes =		0,
-	.wBytesPerInterval =	cpu_to_le16(1024),
-};
-
 static struct usb_descriptor_header *ss_source_sink_descs[] = {
-	(struct usb_descriptor_header *) &source_sink_intf_alt0,
+	(struct usb_descriptor_header *) &source_sink_intf,
 	(struct usb_descriptor_header *) &ss_source_desc,
 	(struct usb_descriptor_header *) &ss_source_comp_desc,
 	(struct usb_descriptor_header *) &ss_sink_desc,
 	(struct usb_descriptor_header *) &ss_sink_comp_desc,
-	(struct usb_descriptor_header *) &source_sink_intf_alt1,
-#define SS_ALT_IFC_1_OFFSET	5
-	(struct usb_descriptor_header *) &ss_source_desc,
-	(struct usb_descriptor_header *) &ss_source_comp_desc,
-	(struct usb_descriptor_header *) &ss_sink_desc,
-	(struct usb_descriptor_header *) &ss_sink_comp_desc,
-	(struct usb_descriptor_header *) &ss_iso_source_desc,
-	(struct usb_descriptor_header *) &ss_iso_source_comp_desc,
-	(struct usb_descriptor_header *) &ss_iso_sink_desc,
-	(struct usb_descriptor_header *) &ss_iso_sink_comp_desc,
 	NULL,
 };
 
@@ -291,191 +184,96 @@
 
 /*-------------------------------------------------------------------------*/
 
-static inline struct usb_request *ss_alloc_ep_req(struct usb_ep *ep, int len)
-{
-	return alloc_ep_req(ep, len);
-}
-
-static void disable_ep(struct usb_composite_dev *cdev, struct usb_ep *ep)
-{
-	int			value;
-
-	value = usb_ep_disable(ep);
-	if (value < 0)
-		DBG(cdev, "disable %s --> %d\n", ep->name, value);
-}
-
-void disable_endpoints(struct usb_composite_dev *cdev,
-		struct usb_ep *in, struct usb_ep *out,
-		struct usb_ep *iso_in, struct usb_ep *iso_out)
-{
-	disable_ep(cdev, in);
-	disable_ep(cdev, out);
-	if (iso_in)
-		disable_ep(cdev, iso_in);
-	if (iso_out)
-		disable_ep(cdev, iso_out);
-}
-
-static int
+static int __init
 sourcesink_bind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct usb_composite_dev *cdev = c->cdev;
 	struct f_sourcesink	*ss = func_to_ss(f);
 	int	id;
-	int ret;
 
 	/* allocate interface ID(s) */
 	id = usb_interface_id(c, f);
 	if (id < 0)
 		return id;
-	source_sink_intf_alt0.bInterfaceNumber = id;
-	source_sink_intf_alt1.bInterfaceNumber = id;
+	source_sink_intf.bInterfaceNumber = id;
 
-	/* allocate bulk endpoints */
+	/* allocate endpoints */
 	ss->in_ep = usb_ep_autoconfig(cdev->gadget, &fs_source_desc);
 	if (!ss->in_ep) {
 autoconf_fail:
-		ERROR(cdev, "%s: can't autoconfigure on %s\n",
+		printk(KERN_NOTICE "%s: can't autoconfigure on %s\n",
 			f->name, cdev->gadget->name);
 		return -ENODEV;
 	}
+	ss->in_ep->driver_data = cdev;	/* claim */
 
 	ss->out_ep = usb_ep_autoconfig(cdev->gadget, &fs_sink_desc);
 	if (!ss->out_ep)
 		goto autoconf_fail;
-
-	/* sanity check the isoc module parameters */
-	if (ss->isoc_interval < 1)
-		ss->isoc_interval = 1;
-	if (ss->isoc_interval > 16)
-		ss->isoc_interval = 16;
-	if (ss->isoc_mult > 2)
-		ss->isoc_mult = 2;
-	if (ss->isoc_maxburst > 15)
-		ss->isoc_maxburst = 15;
-
-	/* fill in the FS isoc descriptors from the module parameters */
-	fs_iso_source_desc.wMaxPacketSize = ss->isoc_maxpacket > 1023 ?
-						1023 : ss->isoc_maxpacket;
-	fs_iso_source_desc.bInterval = ss->isoc_interval;
-	fs_iso_sink_desc.wMaxPacketSize = ss->isoc_maxpacket > 1023 ?
-						1023 : ss->isoc_maxpacket;
-	fs_iso_sink_desc.bInterval = ss->isoc_interval;
-
-	/* allocate iso endpoints */
-	ss->iso_in_ep = usb_ep_autoconfig(cdev->gadget, &fs_iso_source_desc);
-	if (!ss->iso_in_ep)
-		goto no_iso;
-
-	ss->iso_out_ep = usb_ep_autoconfig(cdev->gadget, &fs_iso_sink_desc);
-	if (!ss->iso_out_ep) {
-		usb_ep_autoconfig_release(ss->iso_in_ep);
-		ss->iso_in_ep = NULL;
-no_iso:
-		/*
-		 * We still want to work even if the UDC doesn't have isoc
-		 * endpoints, so null out the alt interface that contains
-		 * them and continue.
-		 */
-		fs_source_sink_descs[FS_ALT_IFC_1_OFFSET] = NULL;
-		hs_source_sink_descs[HS_ALT_IFC_1_OFFSET] = NULL;
-		ss_source_sink_descs[SS_ALT_IFC_1_OFFSET] = NULL;
-	}
-
-	if (ss->isoc_maxpacket > 1024)
-		ss->isoc_maxpacket = 1024;
+	ss->out_ep->driver_data = cdev;	/* claim */
 
 	/* support high speed hardware */
-	hs_source_desc.bEndpointAddress = fs_source_desc.bEndpointAddress;
-	hs_sink_desc.bEndpointAddress = fs_sink_desc.bEndpointAddress;
-
-	/*
-	 * Fill in the HS isoc descriptors from the module parameters.
-	 * We assume that the user knows what they are doing and won't
-	 * give parameters that their UDC doesn't support.
-	 */
-	hs_iso_source_desc.wMaxPacketSize = ss->isoc_maxpacket;
-	hs_iso_source_desc.wMaxPacketSize |= ss->isoc_mult << 11;
-	hs_iso_source_desc.bInterval = ss->isoc_interval;
-	hs_iso_source_desc.bEndpointAddress =
-		fs_iso_source_desc.bEndpointAddress;
-
-	hs_iso_sink_desc.wMaxPacketSize = ss->isoc_maxpacket;
-	hs_iso_sink_desc.wMaxPacketSize |= ss->isoc_mult << 11;
-	hs_iso_sink_desc.bInterval = ss->isoc_interval;
-	hs_iso_sink_desc.bEndpointAddress = fs_iso_sink_desc.bEndpointAddress;
+	if (gadget_is_dualspeed(c->cdev->gadget)) {
+		hs_source_desc.bEndpointAddress =
+				fs_source_desc.bEndpointAddress;
+		hs_sink_desc.bEndpointAddress =
+				fs_sink_desc.bEndpointAddress;
+		f->hs_descriptors = hs_source_sink_descs;
+	}
 
 	/* support super speed hardware */
-	ss_source_desc.bEndpointAddress =
-		fs_source_desc.bEndpointAddress;
-	ss_sink_desc.bEndpointAddress =
-		fs_sink_desc.bEndpointAddress;
-
-	/*
-	 * Fill in the SS isoc descriptors from the module parameters.
-	 * We assume that the user knows what they are doing and won't
-	 * give parameters that their UDC doesn't support.
-	 */
-	ss_iso_source_desc.wMaxPacketSize = ss->isoc_maxpacket;
-	ss_iso_source_desc.bInterval = ss->isoc_interval;
-	ss_iso_source_comp_desc.bmAttributes = ss->isoc_mult;
-	ss_iso_source_comp_desc.bMaxBurst = ss->isoc_maxburst;
-	ss_iso_source_comp_desc.wBytesPerInterval = ss->isoc_maxpacket *
-		(ss->isoc_mult + 1) * (ss->isoc_maxburst + 1);
-	ss_iso_source_desc.bEndpointAddress =
-		fs_iso_source_desc.bEndpointAddress;
-
-	ss_iso_sink_desc.wMaxPacketSize = ss->isoc_maxpacket;
-	ss_iso_sink_desc.bInterval = ss->isoc_interval;
-	ss_iso_sink_comp_desc.bmAttributes = ss->isoc_mult;
-	ss_iso_sink_comp_desc.bMaxBurst = ss->isoc_maxburst;
-	ss_iso_sink_comp_desc.wBytesPerInterval = ss->isoc_maxpacket *
-		(ss->isoc_mult + 1) * (ss->isoc_maxburst + 1);
-	ss_iso_sink_desc.bEndpointAddress = fs_iso_sink_desc.bEndpointAddress;
-
-	ret = usb_assign_descriptors(f, fs_source_sink_descs,
-			hs_source_sink_descs, ss_source_sink_descs, NULL);
-	if (ret)
-		return ret;
+	if (gadget_is_superspeed(c->cdev->gadget)) {
+		ss_source_desc.bEndpointAddress =
+				fs_source_desc.bEndpointAddress;
+		ss_sink_desc.bEndpointAddress =
+				fs_sink_desc.bEndpointAddress;
+		f->ss_descriptors = ss_source_sink_descs;
+	}
 
-	DBG(cdev, "%s speed %s: IN/%s, OUT/%s, ISO-IN/%s, ISO-OUT/%s\n",
+	printk(KERN_NOTICE "%s speed %s: IN/%s, OUT/%s\n",
 	    (gadget_is_superspeed(c->cdev->gadget) ? "super" :
 	     (gadget_is_dualspeed(c->cdev->gadget) ? "dual" : "full")),
-			f->name, ss->in_ep->name, ss->out_ep->name,
-			ss->iso_in_ep ? ss->iso_in_ep->name : "<none>",
-			ss->iso_out_ep ? ss->iso_out_ep->name : "<none>");
+			f->name, ss->in_ep->name, ss->out_ep->name);
 	return 0;
 }
 
 static void
-sourcesink_free_func(struct usb_function *f)
+sourcesink_unbind(struct usb_configuration *c, struct usb_function *f)
 {
-	struct f_ss_opts *opts;
-
-	opts = container_of(f->fi, struct f_ss_opts, func_inst);
-
-	mutex_lock(&opts->lock);
-	opts->refcnt--;
-	mutex_unlock(&opts->lock);
-
-	usb_free_all_descriptors(f);
 	kfree(func_to_ss(f));
 }
+void PrintBlock_usb1(unsigned char* pBuffStar, unsigned int uiBuffLen)
+{
+	unsigned int uiIter;
+	pBuffStar = pBuffStar;
+	printk(KERN_NOTICE "pBuffStar=%p\n", pBuffStar);
+	printk(KERN_NOTICE " %02x", pBuffStar[0]);
+	for (uiIter = 1; uiIter < uiBuffLen; uiIter++){
+		if (uiIter % 16 == 0)
+			printk(KERN_NOTICE "\n");
+		if (uiIter % 512 == 0)
+			printk(KERN_NOTICE "\n");
+		printk(KERN_NOTICE " %02x", pBuffStar[uiIter]);
+	}
+	printk(KERN_NOTICE "\n");
+}
 
 /* optionally require specific source/sink data patterns  */
 static int check_read_data(struct f_sourcesink *ss, struct usb_request *req)
 {
 	unsigned		i;
 	u8			*buf = req->buf;
-	struct usb_composite_dev *cdev = ss->function.config->cdev;
-	int max_packet_size = le16_to_cpu(ss->out_ep->desc->wMaxPacketSize);
-
-	if (ss->pattern == 2)
-		return 0;
-
-	for (i = 0; i < req->actual; i++, buf++) {
-		switch (ss->pattern) {
+	//ERROR(cdev, "note buf[0] = %d\n",*buf);
+	//buf = buf + 2;
+	u32 	*p=(u32 *)buf;
+	u32 	p0 = *((u32 *)p);
+	u32 	pend = p[(req->actual)/4 -1];
+	//PrintBlock_usb1(req->buf, req->actual);
+	
+	printk(KERN_NOTICE "buf0=%x pend=%x p0+len=%x\n",p0,pend,(p0+(req->actual)/4 -1));
+	//for (i = 0; i < req->actual; i++, buf++) {
+	for (i = 0; i < (req->actual)/4; i++, p++) {
+		switch (pattern) {
 
 		/* all-zeroes has no synchronization issues */
 		case 0:
@@ -488,67 +286,79 @@
 		 * each usb transfer request should be.  Resync is done
 		 * with set_interface or set_config.  (We *WANT* it to
 		 * get quickly out of sync if controllers or their drivers
-		 * stutter for any reason, including buffer duplication...)
+		 * stutter for any reason, including buffer duplcation...)
 		 */
 		case 1:
-			if (*buf == (u8)((i % max_packet_size) % 63))
+			//if ((i % 512) == 0)
+			//	buf0 = *buf;
+			//if (*buf == (u8)((buf0 + (i /*% 512*/)) % 63) )
+			if(*((u32 *)p) == p0 + (u32)i)
 				continue;
+			printk(KERN_NOTICE "+%s.%d,%x,%x\n", __FUNCTION__, __LINE__,*((u32 *)p),p0 + (u32)i);
 			break;
 		}
-		ERROR(cdev, "bad OUT byte, buf[%d] = %d\n", i, *buf);
+		//ERROR(cdev, "bad OUT byte, buf[%d] = %d should %d\n", i, *buf,((u8)((buf0 + (i/* % 512*/)) % 63)));
+		printk(KERN_NOTICE "bad OUT byte, buf[%d] = %x should %x\n", i, *((u32 *)buf),(p0 + (u32)i));
+		
+		PrintBlock_usb1(req->buf, req->actual);
+		
+		
+		//return 0;
 		usb_ep_set_halt(ss->out_ep);
 		return -EINVAL;
 	}
+	printk(KERN_NOTICE "buf0=%x\n",*((u32 *)(p-1)));
 	return 0;
 }
+static int check_pattern=0;
 
 static void reinit_write_data(struct usb_ep *ep, struct usb_request *req)
 {
 	unsigned	i;
 	u8		*buf = req->buf;
-	int max_packet_size = le16_to_cpu(ep->desc->wMaxPacketSize);
-	struct f_sourcesink *ss = ep->driver_data;
-
-	switch (ss->pattern) {
+	u32 *p;
+	unsigned	t;
+	t = (req->length + 3) / 4;
+	switch (pattern) {
 	case 0:
 		memset(req->buf, 0, req->length);
 		break;
 	case 1:
+		#if 0
 		for  (i = 0; i < req->length; i++)
-			*buf++ = (u8) ((i % max_packet_size) % 63);
-		break;
-	case 2:
+			*buf++ = (u8) (i % 63);
+		#else
+		p = (u32 *)buf;
+		
+		for(i = check_pattern; i < check_pattern + t;i++)
+			*p++ = (u32)i;
+		check_pattern = i;
+		#endif
 		break;
 	}
 }
 
 static void source_sink_complete(struct usb_ep *ep, struct usb_request *req)
 {
-	struct usb_composite_dev	*cdev;
-	struct f_sourcesink		*ss = ep->driver_data;
-	int				status = req->status;
-
-	/* driver_data will be null if ep has been disabled */
-	if (!ss)
-		return;
-
-	cdev = ss->function.config->cdev;
+	struct f_sourcesink	*ss = ep->driver_data;
+	int			status = req->status;
 
+	printk(KERN_NOTICE "source_sink_complete,s:%d,ep_n:%s\n",status,ep->name);
 	switch (status) {
 
 	case 0:				/* normal completion? */
 		if (ep == ss->out_ep) {
 			check_read_data(ss, req);
-			if (ss->pattern != 2)
-				memset(req->buf, 0x55, req->length);
-		}
+			memset(req->buf, 0x55, req->length);
+		} else
+			reinit_write_data(ep, req);
 		break;
 
 	/* this endpoint is normally active while we're configured */
 	case -ECONNABORTED:		/* hardware forced ep reset */
 	case -ECONNRESET:		/* request dequeued */
 	case -ESHUTDOWN:		/* disconnect from host */
-		VDBG(cdev, "%s gone (%d), %d/%d\n", ep->name, status,
+		printk(KERN_NOTICE "%s gone (%d), %d/%d\n", ep->name, status,
 				req->actual, req->length);
 		if (ep == ss->out_ep)
 			check_read_data(ss, req);
@@ -561,7 +371,7 @@
 					 */
 	default:
 #if 1
-		DBG(cdev, "%s complete --> %d, %d/%d\n", ep->name,
+		printk(KERN_NOTICE "%s complete --> %d, %d/%d\n", ep->name,
 				status, req->actual, req->length);
 #endif
 	case -EREMOTEIO:		/* short read */
@@ -570,65 +380,39 @@
 
 	status = usb_ep_queue(ep, req, GFP_ATOMIC);
 	if (status) {
-		ERROR(cdev, "kill %s:  resubmit %d bytes --> %d\n",
+		printk(KERN_NOTICE "kill %s:  resubmit %d bytes --> %d\n",
 				ep->name, req->length, status);
 		usb_ep_set_halt(ep);
 		/* FIXME recover later ... somehow */
 	}
 }
 
-static int source_sink_start_ep(struct f_sourcesink *ss, bool is_in,
-		bool is_iso, int speed)
+static int source_sink_start_ep(struct f_sourcesink *ss, bool is_in)
 {
 	struct usb_ep		*ep;
 	struct usb_request	*req;
-	int			i, size, qlen, status = 0;
+	int			status;
 
-	if (is_iso) {
-		switch (speed) {
-		case USB_SPEED_SUPER:
-			size = ss->isoc_maxpacket *
-					(ss->isoc_mult + 1) *
-					(ss->isoc_maxburst + 1);
-			break;
-		case USB_SPEED_HIGH:
-			size = ss->isoc_maxpacket * (ss->isoc_mult + 1);
-			break;
-		default:
-			size = ss->isoc_maxpacket > 1023 ?
-					1023 : ss->isoc_maxpacket;
-			break;
-		}
-		ep = is_in ? ss->iso_in_ep : ss->iso_out_ep;
-		qlen = ss->iso_qlen;
-	} else {
-		ep = is_in ? ss->in_ep : ss->out_ep;
-		qlen = ss->bulk_qlen;
-		size = ss->buflen;
-	}
+	ep = is_in ? ss->in_ep : ss->out_ep;
+	req = alloc_ep_req(ep);
+	if (!req)
+		return -ENOMEM;
+
+	req->complete = source_sink_complete;
+	if (is_in)
+		reinit_write_data(ep, req);
+	else
+		memset(req->buf, 0x55, req->length);
 
-	for (i = 0; i < qlen; i++) {
-		req = ss_alloc_ep_req(ep, size);
-		if (!req)
-			return -ENOMEM;
-
-		req->complete = source_sink_complete;
-		if (is_in)
-			reinit_write_data(ep, req);
-		else if (ss->pattern != 2)
-			memset(req->buf, 0x55, req->length);
+	status = usb_ep_queue(ep, req, GFP_ATOMIC);
+	if (status) {
+		struct usb_composite_dev	*cdev;
 
-		status = usb_ep_queue(ep, req, GFP_ATOMIC);
-		if (status) {
-			struct usb_composite_dev	*cdev;
-
-			cdev = ss->function.config->cdev;
-			ERROR(cdev, "start %s%s %s --> %d\n",
-			      is_iso ? "ISO-" : "", is_in ? "IN" : "OUT",
-			      ep->name, status);
-			free_ep_req(ep, req);
-			return status;
-		}
+		cdev = ss->function.config->cdev;
+		printk(KERN_NOTICE "start %s %s --> %d\n",
+				is_in ? "IN" : "OUT",
+				ep->name, status);
+		free_ep_req(ep, req);
 	}
 
 	return status;
@@ -639,20 +423,17 @@
 	struct usb_composite_dev	*cdev;
 
 	cdev = ss->function.config->cdev;
-	disable_endpoints(cdev, ss->in_ep, ss->out_ep, ss->iso_in_ep,
-			ss->iso_out_ep);
-	VDBG(cdev, "%s disabled\n", ss->function.name);
+	disable_endpoints(cdev, ss->in_ep, ss->out_ep);
+	printk(KERN_NOTICE "%s disabled\n", ss->function.name);
 }
 
 static int
-enable_source_sink(struct usb_composite_dev *cdev, struct f_sourcesink *ss,
-		int alt)
+enable_source_sink(struct usb_composite_dev *cdev, struct f_sourcesink *ss)
 {
 	int					result = 0;
-	int					speed = cdev->gadget->speed;
 	struct usb_ep				*ep;
 
-	/* one bulk endpoint writes (sources) zeroes IN (to the host) */
+	/* one endpoint writes (sources) zeroes IN (to the host) */
 	ep = ss->in_ep;
 	result = config_ep_by_speed(cdev->gadget, &(ss->function), ep);
 	if (result)
@@ -662,15 +443,16 @@
 		return result;
 	ep->driver_data = ss;
 
-	result = source_sink_start_ep(ss, true, false, speed);
+	result = source_sink_start_ep(ss, true);
 	if (result < 0) {
 fail:
 		ep = ss->in_ep;
 		usb_ep_disable(ep);
+		ep->driver_data = NULL;
 		return result;
 	}
 
-	/* one bulk endpoint reads (sinks) anything OUT (from the host) */
+	/* one endpoint reads (sinks) anything OUT (from the host) */
 	ep = ss->out_ep;
 	result = config_ep_by_speed(cdev->gadget, &(ss->function), ep);
 	if (result)
@@ -680,77 +462,27 @@
 		goto fail;
 	ep->driver_data = ss;
 
-	result = source_sink_start_ep(ss, false, false, speed);
+	result = source_sink_start_ep(ss, false);
 	if (result < 0) {
-fail2:
-		ep = ss->out_ep;
 		usb_ep_disable(ep);
+		ep->driver_data = NULL;
 		goto fail;
 	}
 
-	if (alt == 0)
-		goto out;
-
-	/* one iso endpoint writes (sources) zeroes IN (to the host) */
-	ep = ss->iso_in_ep;
-	if (ep) {
-		result = config_ep_by_speed(cdev->gadget, &(ss->function), ep);
-		if (result)
-			goto fail2;
-		result = usb_ep_enable(ep);
-		if (result < 0)
-			goto fail2;
-		ep->driver_data = ss;
-
-		result = source_sink_start_ep(ss, true, true, speed);
-		if (result < 0) {
-fail3:
-			ep = ss->iso_in_ep;
-			if (ep)
-				usb_ep_disable(ep);
-			goto fail2;
-		}
-	}
-
-	/* one iso endpoint reads (sinks) anything OUT (from the host) */
-	ep = ss->iso_out_ep;
-	if (ep) {
-		result = config_ep_by_speed(cdev->gadget, &(ss->function), ep);
-		if (result)
-			goto fail3;
-		result = usb_ep_enable(ep);
-		if (result < 0)
-			goto fail3;
-		ep->driver_data = ss;
-
-		result = source_sink_start_ep(ss, false, true, speed);
-		if (result < 0) {
-			usb_ep_disable(ep);
-			goto fail3;
-		}
-	}
-out:
-	ss->cur_alt = alt;
-
-	DBG(cdev, "%s enabled, alt intf %d\n", ss->function.name, alt);
+	printk(KERN_NOTICE "%s enabled\n", ss->function.name);
 	return result;
 }
 
 static int sourcesink_set_alt(struct usb_function *f,
 		unsigned intf, unsigned alt)
 {
-	struct f_sourcesink		*ss = func_to_ss(f);
-	struct usb_composite_dev	*cdev = f->config->cdev;
-
-	disable_source_sink(ss);
-	return enable_source_sink(cdev, ss, alt);
-}
-
-static int sourcesink_get_alt(struct usb_function *f, unsigned intf)
-{
-	struct f_sourcesink		*ss = func_to_ss(f);
+	struct f_sourcesink	*ss = func_to_ss(f);
+	struct usb_composite_dev *cdev = f->config->cdev;
 
-	return ss->cur_alt;
+	/* we know alt is zero */
+	if (!ss->in_ep->driver_data)
+		disable_source_sink(ss);
+	return enable_source_sink(cdev, ss);
 }
 
 static void sourcesink_disable(struct usb_function *f)
@@ -762,17 +494,38 @@
 
 /*-------------------------------------------------------------------------*/
 
-static int sourcesink_setup(struct usb_function *f,
+static int __init sourcesink_bind_config(struct usb_configuration *c)
+{
+	struct f_sourcesink	*ss;
+	int			status;
+
+	ss = kzalloc(sizeof *ss, GFP_KERNEL);
+	if (!ss)
+		return -ENOMEM;
+
+	ss->function.name = "source/sink";
+	ss->function.fs_descriptors = fs_source_sink_descs;
+	ss->function.bind = sourcesink_bind;
+	ss->function.unbind = sourcesink_unbind;
+	ss->function.set_alt = sourcesink_set_alt;
+	ss->function.disable = sourcesink_disable;
+
+	status = usb_add_function(c, &ss->function);
+	if (status)
+		kfree(ss);
+	return status;
+}
+
+static int sourcesink_setup(struct usb_configuration *c,
 		const struct usb_ctrlrequest *ctrl)
 {
-	struct usb_configuration        *c = f->config;
 	struct usb_request	*req = c->cdev->req;
 	int			value = -EOPNOTSUPP;
 	u16			w_index = le16_to_cpu(ctrl->wIndex);
 	u16			w_value = le16_to_cpu(ctrl->wValue);
 	u16			w_length = le16_to_cpu(ctrl->wLength);
 
-	req->length = USB_COMP_EP0_BUFSIZ;
+	req->length = USB_BUFSIZ;
 
 	/* composite driver infrastructure handles everything except
 	 * the two control test requests.
@@ -811,22 +564,21 @@
 
 	default:
 unknown:
-		VDBG(c->cdev,
-			"unknown control req%02x.%02x v%04x i%04x l%d\n",
+		printk(KERN_NOTICE "unknown control req%02x.%02x v%04x i%04x l%d\n",
 			ctrl->bRequestType, ctrl->bRequest,
 			w_value, w_index, w_length);
 	}
 
 	/* respond with data transfer or status phase? */
 	if (value >= 0) {
-		VDBG(c->cdev, "source/sink req%02x.%02x v%04x i%04x l%d\n",
+		printk(KERN_NOTICE "source/sink req%02x.%02x v%04x i%04x l%d\n",
 			ctrl->bRequestType, ctrl->bRequest,
 			w_value, w_index, w_length);
 		req->zero = 0;
 		req->length = value;
 		value = usb_ep_queue(c->cdev->gadget->ep0, req, GFP_ATOMIC);
 		if (value < 0)
-			ERROR(c->cdev, "source/sink response, err %d\n",
+			printk(KERN_NOTICE "source/sinkc response, err %d\n",
 					value);
 	}
 
@@ -834,457 +586,41 @@
 	return value;
 }
 
-static struct usb_function *source_sink_alloc_func(
-		struct usb_function_instance *fi)
-{
-	struct f_sourcesink     *ss;
-	struct f_ss_opts	*ss_opts;
-
-	ss = kzalloc(sizeof(*ss), GFP_KERNEL);
-	if (!ss)
-		return NULL;
-
-	ss_opts =  container_of(fi, struct f_ss_opts, func_inst);
-
-	mutex_lock(&ss_opts->lock);
-	ss_opts->refcnt++;
-	mutex_unlock(&ss_opts->lock);
-
-	ss->pattern = ss_opts->pattern;
-	ss->isoc_interval = ss_opts->isoc_interval;
-	ss->isoc_maxpacket = ss_opts->isoc_maxpacket;
-	ss->isoc_mult = ss_opts->isoc_mult;
-	ss->isoc_maxburst = ss_opts->isoc_maxburst;
-	ss->buflen = ss_opts->bulk_buflen;
-	ss->bulk_qlen = ss_opts->bulk_qlen;
-	ss->iso_qlen = ss_opts->iso_qlen;
-
-	ss->function.name = "source/sink";
-	ss->function.bind = sourcesink_bind;
-	ss->function.set_alt = sourcesink_set_alt;
-	ss->function.get_alt = sourcesink_get_alt;
-	ss->function.disable = sourcesink_disable;
-	ss->function.setup = sourcesink_setup;
-	ss->function.strings = sourcesink_strings;
-
-	ss->function.free_func = sourcesink_free_func;
-
-	return &ss->function;
-}
-
-static inline struct f_ss_opts *to_f_ss_opts(struct config_item *item)
-{
-	return container_of(to_config_group(item), struct f_ss_opts,
-			    func_inst.group);
-}
-
-static void ss_attr_release(struct config_item *item)
-{
-	struct f_ss_opts *ss_opts = to_f_ss_opts(item);
-
-	usb_put_function_instance(&ss_opts->func_inst);
-}
-
-static struct configfs_item_operations ss_item_ops = {
-	.release		= ss_attr_release,
+static struct usb_configuration sourcesink_driver = {
+	.label		= "source/sink",
+	.strings	= sourcesink_strings,
+	.setup		= sourcesink_setup,
+	.bConfigurationValue = 3,
+	.bmAttributes	= USB_CONFIG_ATT_SELFPOWER,
+	/* .iConfiguration = DYNAMIC */
 };
 
-static ssize_t f_ss_opts_pattern_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->pattern);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_pattern_store(struct config_item *item,
-				       const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u8 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou8(page, 0, &num);
-	if (ret)
-		goto end;
-
-	if (num != 0 && num != 1 && num != 2) {
-		ret = -EINVAL;
-		goto end;
-	}
-
-	opts->pattern = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, pattern);
-
-static ssize_t f_ss_opts_isoc_interval_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->isoc_interval);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_isoc_interval_store(struct config_item *item,
-				       const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u8 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou8(page, 0, &num);
-	if (ret)
-		goto end;
-
-	if (num > 16) {
-		ret = -EINVAL;
-		goto end;
-	}
-
-	opts->isoc_interval = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, isoc_interval);
-
-static ssize_t f_ss_opts_isoc_maxpacket_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->isoc_maxpacket);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_isoc_maxpacket_store(struct config_item *item,
-				       const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u16 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou16(page, 0, &num);
-	if (ret)
-		goto end;
-
-	if (num > 1024) {
-		ret = -EINVAL;
-		goto end;
-	}
-
-	opts->isoc_maxpacket = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, isoc_maxpacket);
-
-static ssize_t f_ss_opts_isoc_mult_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->isoc_mult);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_isoc_mult_store(struct config_item *item,
-				       const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u8 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou8(page, 0, &num);
-	if (ret)
-		goto end;
-
-	if (num > 2) {
-		ret = -EINVAL;
-		goto end;
-	}
-
-	opts->isoc_mult = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, isoc_mult);
-
-static ssize_t f_ss_opts_isoc_maxburst_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->isoc_maxburst);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_isoc_maxburst_store(struct config_item *item,
-				       const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u8 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou8(page, 0, &num);
-	if (ret)
-		goto end;
-
-	if (num > 15) {
-		ret = -EINVAL;
-		goto end;
-	}
-
-	opts->isoc_maxburst = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, isoc_maxburst);
-
-static ssize_t f_ss_opts_bulk_buflen_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->bulk_buflen);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_bulk_buflen_store(struct config_item *item,
-					   const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u32 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou32(page, 0, &num);
-	if (ret)
-		goto end;
-
-	opts->bulk_buflen = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, bulk_buflen);
-
-static ssize_t f_ss_opts_bulk_qlen_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->bulk_qlen);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_ss_opts_bulk_qlen_store(struct config_item *item,
-					   const char *page, size_t len)
+/**
+ * sourcesink_add - add a source/sink testing configuration to a device
+ * @cdev: the device to support the configuration
+ */
+int __init sourcesink_add(struct usb_composite_dev *cdev, bool autoresume)
 {
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u32 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
+	int id;
 
-	ret = kstrtou32(page, 0, &num);
-	if (ret)
-		goto end;
-
-	opts->bulk_qlen = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, bulk_qlen);
-
-static ssize_t f_ss_opts_iso_qlen_show(struct config_item *item, char *page)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int result;
+	/* allocate string ID(s) */
+	id = usb_string_id(cdev);
+	if (id < 0)
+		return id;
+	strings_sourcesink[0].id = id;
 
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%u\n", opts->iso_qlen);
-	mutex_unlock(&opts->lock);
+	source_sink_intf.iInterface = id;
+	sourcesink_driver.iConfiguration = id;
 
-	return result;
-}
+	/* support autoresume for remote wakeup testing */
+	if (autoresume)
+		sourcesink_driver.bmAttributes |= USB_CONFIG_ATT_WAKEUP;
 
-static ssize_t f_ss_opts_iso_qlen_store(struct config_item *item,
-					   const char *page, size_t len)
-{
-	struct f_ss_opts *opts = to_f_ss_opts(item);
-	int ret;
-	u32 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
+	/* support OTG systems */
+	if (gadget_is_otg(cdev->gadget)) {
+		sourcesink_driver.descriptors = otg_desc;
+		sourcesink_driver.bmAttributes |= USB_CONFIG_ATT_WAKEUP;
 	}
 
-	ret = kstrtou32(page, 0, &num);
-	if (ret)
-		goto end;
-
-	opts->iso_qlen = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_ss_opts_, iso_qlen);
-
-static struct configfs_attribute *ss_attrs[] = {
-	&f_ss_opts_attr_pattern,
-	&f_ss_opts_attr_isoc_interval,
-	&f_ss_opts_attr_isoc_maxpacket,
-	&f_ss_opts_attr_isoc_mult,
-	&f_ss_opts_attr_isoc_maxburst,
-	&f_ss_opts_attr_bulk_buflen,
-	&f_ss_opts_attr_bulk_qlen,
-	&f_ss_opts_attr_iso_qlen,
-	NULL,
-};
-
-static struct config_item_type ss_func_type = {
-	.ct_item_ops    = &ss_item_ops,
-	.ct_attrs	= ss_attrs,
-	.ct_owner       = THIS_MODULE,
-};
-
-static void source_sink_free_instance(struct usb_function_instance *fi)
-{
-	struct f_ss_opts *ss_opts;
-
-	ss_opts = container_of(fi, struct f_ss_opts, func_inst);
-	kfree(ss_opts);
-}
-
-static struct usb_function_instance *source_sink_alloc_inst(void)
-{
-	struct f_ss_opts *ss_opts;
-
-	ss_opts = kzalloc(sizeof(*ss_opts), GFP_KERNEL);
-	if (!ss_opts)
-		return ERR_PTR(-ENOMEM);
-	mutex_init(&ss_opts->lock);
-	ss_opts->func_inst.free_func_inst = source_sink_free_instance;
-	ss_opts->isoc_interval = GZERO_ISOC_INTERVAL;
-	ss_opts->isoc_maxpacket = GZERO_ISOC_MAXPACKET;
-	ss_opts->bulk_buflen = GZERO_BULK_BUFLEN;
-	ss_opts->bulk_qlen = GZERO_SS_BULK_QLEN;
-	ss_opts->iso_qlen = GZERO_SS_ISO_QLEN;
-
-	config_group_init_type_name(&ss_opts->func_inst.group, "",
-				    &ss_func_type);
-
-	return &ss_opts->func_inst;
+	return usb_add_config(cdev, &sourcesink_driver, sourcesink_bind_config);
 }
-DECLARE_USB_FUNCTION(SourceSink, source_sink_alloc_inst,
-		source_sink_alloc_func);
-
-static int __init sslb_modinit(void)
-{
-	int ret;
-
-	ret = usb_function_register(&SourceSinkusb_func);
-	if (ret)
-		return ret;
-	ret = lb_modinit();
-	if (ret)
-		usb_function_unregister(&SourceSinkusb_func);
-	return ret;
-}
-static void __exit sslb_modexit(void)
-{
-	usb_function_unregister(&SourceSinkusb_func);
-	lb_modexit();
-}
-module_init(sslb_modinit);
-module_exit(sslb_modexit);
-
-MODULE_LICENSE("GPL");
