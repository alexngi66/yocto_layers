--- a/drivers/usb/gadget/udc/core.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/gadget/udc/core.c	2018-11-12 06:42:55.000000000 +0300
@@ -101,21 +101,7 @@
  */
 int usb_ep_enable(struct usb_ep *ep)
 {
-	int ret = 0;
-
-	if (ep->enabled)
-		goto out;
-
-	ret = ep->ops->enable(ep, ep->desc);
-	if (ret)
-		goto out;
-
-	ep->enabled = true;
-
-out:
-	trace_usb_ep_enable(ep, ret);
-
-	return ret;
+	return ep->ops->enable(ep, ep->desc);
 }
 EXPORT_SYMBOL_GPL(usb_ep_enable);
 
@@ -133,23 +119,7 @@
  */
 int usb_ep_disable(struct usb_ep *ep)
 {
-	int ret = 0;
-
-	if (!ep->enabled)
-		goto out;
-
-	ret = ep->ops->disable(ep);
-	if (ret) {
-		ret = ret;
-		goto out;
-	}
-
-	ep->enabled = false;
-
-out:
-	trace_usb_ep_disable(ep, ret);
-
-	return ret;
+	return ep->ops->disable(ep);
 }
 EXPORT_SYMBOL_GPL(usb_ep_disable);
 
@@ -257,19 +227,7 @@
 int usb_ep_queue(struct usb_ep *ep,
 			       struct usb_request *req, gfp_t gfp_flags)
 {
-	int ret = 0;
-
-	if (WARN_ON_ONCE(!ep->enabled && ep->address)) {
-		ret = -ESHUTDOWN;
-		goto out;
-	}
-
-	ret = ep->ops->queue(ep, req, gfp_flags);
-
-out:
-	trace_usb_ep_queue(ep, req, ret);
-
-	return ret;
+	return ep->ops->queue(ep, req, gfp_flags);
 }
 EXPORT_SYMBOL_GPL(usb_ep_queue);
 
@@ -290,12 +248,7 @@
  */
 int usb_ep_dequeue(struct usb_ep *ep, struct usb_request *req)
 {
-	int ret;
-
-	ret = ep->ops->dequeue(ep, req);
-	trace_usb_ep_dequeue(ep, req, ret);
-
-	return ret;
+	return ep->ops->dequeue(ep, req);
 }
 EXPORT_SYMBOL_GPL(usb_ep_dequeue);
 
@@ -970,8 +923,10 @@
 void usb_gadget_set_state(struct usb_gadget *gadget,
 		enum usb_device_state state)
 {
+#if 0
 	gadget->state = state;
 	schedule_work(&gadget->work);
+#endif
 }
 EXPORT_SYMBOL_GPL(usb_gadget_set_state);
 
@@ -1054,7 +1009,7 @@
  */
 static inline void usb_gadget_udc_stop(struct usb_udc *udc)
 {
-	udc->gadget->ops->udc_stop(udc->gadget);
+	udc->gadget->ops->udc_stop(udc->driver);
 }
 
 /**
@@ -1221,7 +1176,47 @@
  */
 int usb_add_gadget_udc(struct device *parent, struct usb_gadget *gadget)
 {
+#ifdef CONFIG_USB_GADGET_SUNPLUS
+	struct usb_udc		*udc;
+	int			ret = -ENOMEM;
+
+	udc = kzalloc(sizeof(*udc), GFP_KERNEL);
+	if (!udc)
+		goto err1;
+
+	device_initialize(&udc->dev);
+	udc->dev.release = usb_udc_release;
+	udc->dev.class = udc_class;
+	udc->dev.groups = usb_udc_attr_groups;
+	udc->dev.parent = parent;
+	ret = dev_set_name(&udc->dev, "%s", kobject_name(&parent->kobj));
+	if (ret)
+		goto err2;
+
+	udc->gadget = gadget;
+
+	mutex_lock(&udc_lock);
+	list_add_tail(&udc->list, &udc_list);
+
+	ret = device_add(&udc->dev);
+	if (ret)
+		goto err3;
+
+	mutex_unlock(&udc_lock);
+
+	return 0;
+err3:
+	list_del(&udc->list);
+	mutex_unlock(&udc_lock);
+
+err2:
+	put_device(&udc->dev);
+
+err1:
+	return ret;
+#else
 	return usb_add_gadget_udc_release(parent, gadget, NULL);
+#endif
 }
 EXPORT_SYMBOL_GPL(usb_add_gadget_udc);
 
@@ -1288,17 +1283,19 @@
 
 	udc->driver = driver;
 	udc->dev.driver = &driver->driver;
+#if 0
 	udc->gadget->dev.driver = &driver->driver;
 
 	ret = driver->bind(udc->gadget, driver);
 	if (ret)
 		goto err1;
+#endif
 	ret = usb_gadget_udc_start(udc);
 	if (ret) {
 		driver->unbind(udc->gadget);
 		goto err1;
 	}
-	usb_udc_connect_control(udc);
+	/*usb_udc_connect_control(udc);*/
 
 	kobject_uevent(&udc->dev.kobj, KOBJ_CHANGE);
 	return 0;
