--- a/drivers/usb/host/ohci-platform.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/host/ohci-platform.c	2018-11-12 06:42:55.000000000 +0300
@@ -3,7 +3,6 @@
  *
  * Copyright 2007 Michael Buesch <m@bues.ch>
  * Copyright 2011-2012 Hauke Mehrtens <hauke@hauke-m.de>
- * Copyright 2014 Hans de Goede <hdegoede@redhat.com>
  *
  * Derived from the OCHI-SSB driver
  * Derived from the OHCI-PCI driver
@@ -14,386 +13,618 @@
  *
  * Licensed under the GNU/GPL. See COPYING for details.
  */
-
-#include <linux/clk.h>
-#include <linux/dma-mapping.h>
-#include <linux/hrtimer.h>
-#include <linux/io.h>
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/err.h>
-#include <linux/phy/phy.h>
 #include <linux/platform_device.h>
-#include <linux/reset.h>
 #include <linux/usb/ohci_pdriver.h>
-#include <linux/usb.h>
-#include <linux/usb/hcd.h>
 
-#include "ohci.h"
+#include <linux/kthread.h>
+#include <linux/notifier.h>
+//#include "ohci.h"
+
+#ifdef CONFIG_USB_SP_UDC_HOST
+#include "udc-to-host.h"
+#endif
+
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
 
-#define DRIVER_DESC "OHCI generic platform driver"
-#define OHCI_MAX_CLKS 3
-#define OHCI_MAX_RESETS 2
-#define hcd_to_ohci_priv(h) ((struct ohci_platform_priv *)hcd_to_ohci(h)->priv)
-
-struct ohci_platform_priv {
-	struct clk *clks[OHCI_MAX_CLKS];
-	struct reset_control *resets[OHCI_MAX_RESETS];
-	struct phy **phys;
-	int num_phys;
+struct ohci_hcd_sp {
+	/* must be 1st member here for hcd_to_ehci() to work */
+	struct ohci_hcd ohci;
+
+	struct task_struct *reset_thread;
+	struct notifier_block ohci_notifier;
+
+#ifdef CONFIG_USB_SP_UDC_HOST
+	struct notifier_block udc_notifier;
+#endif
+
+	u32 flag;
+
+#define RESET_UPHY_SIGN	(1<<0)
+#define RESET_HC_SIGN		(1<<1)
+#define RESET_SENDER		(1<<31)
+#define FASTBOOT_FG			(1<<30)
 };
 
-static const char hcd_name[] = "ohci-platform";
+#elif defined CONFIG_USB_SP_UDC_HOST
 
-static int ohci_platform_power_on(struct platform_device *dev)
-{
-	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct ohci_platform_priv *priv = hcd_to_ohci_priv(hcd);
-	int clk, ret, phy_num;
+struct ohci_hcd_sp {
+	/* must be 1st member here for hcd_to_ehci() to work */
+	struct ohci_hcd ohci;
+	struct notifier_block udc_notifier;
+};
+#endif
 
-	for (clk = 0; clk < OHCI_MAX_CLKS && priv->clks[clk]; clk++) {
-		ret = clk_prepare_enable(priv->clks[clk]);
-		if (ret)
-			goto err_disable_clks;
-	}
+#if 1				/*fix ohci msi */
+/*
+*twofish suggest that latency should not
+*exceed 8192 clock cycles(system clock),about 24.8us
+*/
+s32 get_td_retry_time = 24;
+#endif
 
-	for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-		ret = phy_init(priv->phys[phy_num]);
-		if (ret)
-			goto err_exit_phy;
-		ret = phy_power_on(priv->phys[phy_num]);
-		if (ret) {
-			phy_exit(priv->phys[phy_num]);
-			goto err_exit_phy;
-		}
-	}
+static int ohci_platform_reset(struct usb_hcd *hcd)
+{
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
+	struct usb_ohci_pdata *pdata = pdev->dev.platform_data;
+	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
+	int err;
 
-	return 0;
+	if (pdata->big_endian_desc)
+		ohci->flags |= OHCI_QUIRK_BE_DESC;
+	if (pdata->big_endian_mmio)
+		ohci->flags |= OHCI_QUIRK_BE_MMIO;
+	if (pdata->no_big_frame_no)
+		ohci->flags |= OHCI_QUIRK_FRAME_NO;
 
-err_exit_phy:
-	while (--phy_num >= 0) {
-		phy_power_off(priv->phys[phy_num]);
-		phy_exit(priv->phys[phy_num]);
-	}
-err_disable_clks:
-	while (--clk >= 0)
-		clk_disable_unprepare(priv->clks[clk]);
+	ohci_hcd_init(ohci);
+	err = ohci_init(ohci);
 
-	return ret;
+	return err;
 }
 
-static void ohci_platform_power_off(struct platform_device *dev)
+static int ohci_platform_start(struct usb_hcd *hcd)
 {
-	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct ohci_platform_priv *priv = hcd_to_ohci_priv(hcd);
-	int clk, phy_num;
+	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
+	int err;
 
-	for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-		phy_power_off(priv->phys[phy_num]);
-		phy_exit(priv->phys[phy_num]);
+	err = ohci_run(ohci);
+	if (err < 0) {
+		ohci_err(ohci, "can't start\n");
+		ohci_stop(hcd);
 	}
 
-	for (clk = OHCI_MAX_CLKS - 1; clk >= 0; clk--)
-		if (priv->clks[clk])
-			clk_disable_unprepare(priv->clks[clk]);
+	return err;
 }
 
-static struct hc_driver __read_mostly ohci_platform_hc_driver;
+static const struct hc_driver ohci_platform_hc_driver = {
+	.description = hcd_name,
+	.product_desc = "Generic Platform OHCI Controller",
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
+	.hcd_priv_size = sizeof(struct ohci_hcd_sp),
+#else
+	.hcd_priv_size = sizeof(struct ohci_hcd),
+#endif
 
-static const struct ohci_driver_overrides platform_overrides __initconst = {
-	.product_desc =		"Generic Platform OHCI controller",
-	.extra_priv_size =	sizeof(struct ohci_platform_priv),
-};
+	.irq = ohci_irq,
+	.flags = HCD_MEMORY | HCD_USB11,
 
-static struct usb_ohci_pdata ohci_platform_defaults = {
-	.power_on =		ohci_platform_power_on,
-	.power_suspend =	ohci_platform_power_off,
-	.power_off =		ohci_platform_power_off,
+	.reset = ohci_platform_reset,
+	.start = ohci_platform_start,
+	.stop = ohci_stop,
+	.shutdown = ohci_shutdown,
+
+	.urb_enqueue = ohci_urb_enqueue,
+	.urb_dequeue = ohci_urb_dequeue,
+	.endpoint_disable = ohci_endpoint_disable,
+
+	.get_frame_number = ohci_get_frame,
+
+	.hub_status_data = ohci_hub_status_data,
+	.hub_control = ohci_hub_control,
+#ifdef	CONFIG_PM
+	.bus_suspend = ohci_bus_suspend,
+	.bus_resume = ohci_bus_resume,
+#endif
+
+	.start_port_reset = ohci_start_port_reset,
+	.get_port_status_from_register = ohci_get_port_status_from_register,
 };
 
-static int ohci_platform_probe(struct platform_device *dev)
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
+#include <mach/io_map.h>
+#define 	RESET_UPHY(x,ret,addr)	{				\
+				ret	 = ioread32(addr);		\
+				ret |= (1<<(9+x))|(1<<(12+x));		\
+				iowrite32(ret,addr);			\
+				ret &= ~((1<<(9+x))|(1<<(12+x)));	\
+				iowrite32(ret,addr);			\
+			}
+#define		REG_UPHY_RESET_OFFSET	(18)
+#endif
+
+#ifdef 	CONFIG_USB_HOST_RESET
+
+static int ohci_reset_thread(void *arg)
 {
-	struct usb_hcd *hcd;
-	struct resource *res_mem;
-	struct usb_ohci_pdata *pdata = dev_get_platdata(&dev->dev);
-	struct ohci_platform_priv *priv;
-	struct ohci_hcd *ohci;
-	int err, irq, phy_num, clk = 0, rst = 0;
+	struct ohci_hcd_sp *sp_ohci = (struct ohci_hcd_sp *)arg;
+	struct ohci_hcd *ohci = (struct ohci_hcd *)arg;
+	struct usb_hcd *hcd = ohci_to_hcd(ohci);
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
 
-	if (usb_disabled())
-		return -ENODEV;
+	u32 val;
+	int i;
+	//int flag = 1;
 
-	/*
-	 * Use reasonable defaults so platforms don't have to provide these
-	 * with DT probing on ARM.
-	 */
-	if (!pdata)
-		pdata = &ohci_platform_defaults;
+	while (1) {
 
-	err = dma_coerce_mask_and_coherent(&dev->dev, DMA_BIT_MASK(32));
-	if (err)
-		return err;
+		if (sp_ohci->flag & (RESET_UPHY_SIGN | RESET_HC_SIGN)) {
 
-	irq = platform_get_irq(dev, 0);
-	if (irq < 0) {
-		dev_err(&dev->dev, "no irq provided");
-		return irq;
+			while (hcd->self.devmap.devicemap[0] != 2)
+				msleep(1);
+
+			if (hcd->self.devmap.devicemap[0] > 2) {
+				goto NEXT_LOOP;
+			}
+
+			for (i = 1; i < 128 / (8 * sizeof(unsigned long)); i++) {
+				if (hcd->self.devmap.devicemap[i]) {
+					goto NEXT_LOOP;
+				}
+			}
+
+			/*hcd->irq will be set to 0 by ohci_stop() */
+			if (pdev->id == 1) {
+				i = SP_IRQ_OHCI_USB0;
+			} else if (pdev->id == 2) {
+				i = SP_IRQ_OHCI_USB1;
+			}
+
+			if (sp_ohci->flag & RESET_UPHY_SIGN) {
+				reset_uphy(pdev->id - 1);
+				sp_ohci->flag = RESET_SENDER;
+			} else {
+				sp_ohci->flag = 0;
+			}
+
+			hcd->irq = i;
+			usb_remove_hcd(hcd);
+			ohci_usb_reset(ohci);
+			msleep(1);
+			usb_add_hcd(hcd, i, IRQF_SHARED);
+		}
+
+NEXT_LOOP:
+		sp_ohci->flag = 0;
+		msleep(30);
 	}
 
-	hcd = usb_create_hcd(&ohci_platform_hc_driver, &dev->dev,
-			dev_name(&dev->dev));
-	if (!hcd)
-		return -ENOMEM;
+	return 0;
+}
 
-	platform_set_drvdata(dev, hcd);
-	dev->dev.platform_data = pdata;
-	priv = hcd_to_ohci_priv(hcd);
-	ohci = hcd_to_ohci(hcd);
-
-	if (pdata == &ohci_platform_defaults && dev->dev.of_node) {
-		if (of_property_read_bool(dev->dev.of_node, "big-endian-regs"))
-			ohci->flags |= OHCI_QUIRK_BE_MMIO;
-
-		if (of_property_read_bool(dev->dev.of_node, "big-endian-desc"))
-			ohci->flags |= OHCI_QUIRK_BE_DESC;
-
-		if (of_property_read_bool(dev->dev.of_node, "big-endian"))
-			ohci->flags |= OHCI_QUIRK_BE_MMIO | OHCI_QUIRK_BE_DESC;
-
-		if (of_property_read_bool(dev->dev.of_node, "no-big-frame-no"))
-			ohci->flags |= OHCI_QUIRK_FRAME_NO;
-
-		of_property_read_u32(dev->dev.of_node, "num-ports",
-				     &ohci->num_ports);
-
-		priv->num_phys = of_count_phandle_with_args(dev->dev.of_node,
-				"phys", "#phy-cells");
-
-		if (priv->num_phys > 0) {
-			priv->phys = devm_kcalloc(&dev->dev, priv->num_phys,
-					    sizeof(struct phy *), GFP_KERNEL);
-			if (!priv->phys)
-				return -ENOMEM;
-		} else
-			priv->num_phys = 0;
-
-		for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-			priv->phys[phy_num] = devm_of_phy_get_by_index(
-					&dev->dev, dev->dev.of_node, phy_num);
-			if (IS_ERR(priv->phys[phy_num])) {
-				err = PTR_ERR(priv->phys[phy_num]);
-				goto err_put_hcd;
-			} else if (!hcd->phy) {
-				/* Avoiding phy_get() in usb_add_hcd() */
-				hcd->phy = priv->phys[phy_num];
+#elif defined(CONFIG_USB_HOST_RESET_SP)
+
+#ifdef CONFIG_USB_GADGET_SUNPLUS
+extern void usb_switch(int device);
+#ifdef CONFIG_USB_MULTIPLE_RESET_PROBLEM_WORKAROUND
+extern void ctrl_rx_squelch(void);
+#endif
+extern void detech_start(void);
+#endif
+
+#ifdef CONFIG_USB_LOGO_TEST
+extern u32 usb_logo_test_start;
+#endif
+
+static int ohci_reset_thread(void *arg)
+{
+	struct ohci_hcd *ohci = (struct ohci_hcd *)arg;
+	struct ohci_hcd_sp *sp_ohci = (struct ohci_hcd_sp *)arg;
+	struct usb_hcd *hcd = ohci_to_hcd(ohci);
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
+	u32 flag;
+	int i;
+	int irq_num = 0;
+	void __iomem *reg_addr;
+
+	do {
+
+NEXT_LOOP:
+		msleep(1);
+		wait_event_interruptible(hcd->reset_queue,
+					 ((sp_ohci->flag &
+					   (RESET_UPHY_SIGN | RESET_HC_SIGN)) !=
+					  0) || kthread_should_stop());
+
+		if (kthread_should_stop())
+			break;
+
+#ifdef CONFIG_USB_LOGO_TEST
+		if (usb_logo_test_start == 1) {
+			sp_ohci->flag = 0;
+			continue;
+		}
+#endif
+
+		/*besure nothing on hcd bus */
+		for (i = 1; i < 128 / (8 * sizeof(unsigned long)); i++) {
+			if (hcd->self.devmap.devicemap[i]) {
+				sp_ohci->flag = 0;
+				goto NEXT_LOOP;
 			}
 		}
 
-		for (clk = 0; clk < OHCI_MAX_CLKS; clk++) {
-			priv->clks[clk] = of_clk_get(dev->dev.of_node, clk);
-			if (IS_ERR(priv->clks[clk])) {
-				err = PTR_ERR(priv->clks[clk]);
-				if (err == -EPROBE_DEFER)
-					goto err_put_clks;
-				priv->clks[clk] = NULL;
-				break;
+		printk("### %s  devicemap=%lx +\n", __FUNCTION__, hcd->self.devmap.devicemap[0]);
+		if (hcd->self.devmap.devicemap[0] == 2) {
+			irq_num = hcd->irq;
+			flag = sp_ohci->flag;
+			/*Clear flag  */
+			clear_bit(HCD_FLAG_RH_RUNNING, &hcd->flags);
+			clear_bit(HCD_FLAG_DEAD, &hcd->flags);
+
+			disable_irq(hcd->irq);
+			usb_remove_hcd(hcd);
+
+#ifndef CONFIG_USB_SUNPLUS_OTG
+			if (flag & RESET_UPHY_SIGN) {
+				reg_addr = (pdev->id - 1) ? uphy1_base_addr : uphy0_base_addr;
+				hcd->uphy_disconnect_level[pdev->id - 1] = readl(reg_addr + DISC_LEVEL_OFFSET);
+				reset_uphy(pdev->id - 1);
+				reinit_uphy(pdev->id - 1);
+				writel(hcd->uphy_disconnect_level[pdev->id - 1], reg_addr + DISC_LEVEL_OFFSET);
+				/*tell ehci reset controllor */
+				sp_ohci->flag = RESET_SENDER;
+#ifdef CONFIG_USB_GADGET_SUNPLUS
+				printk(KERN_NOTICE
+				       "port_num:%d,device_mode_flag:%d\n",
+				       pdev->id - 1,
+				       platform_device_mode_flag[pdev->id - 1]);
+				if (platform_device_mode_flag[pdev->id - 1]) {
+					platform_device_mode_flag[pdev->id -
+								  1] = false;
+					msleep(1);
+					usb_switch(1);
+					msleep(1);
+#ifdef CONFIG_USB_MULTIPLE_RESET_PROBLEM_WORKAROUND
+					/*control squelch signal */
+					ctrl_rx_squelch();
+					msleep(1);
+#endif
+					detech_start();
+				}
+#endif
 			}
+#endif
+			msleep(100);
+
+			usb_add_hcd(hcd, irq_num, IRQF_DISABLED | IRQF_SHARED);
+
+			sp_ohci->flag &= ~RESET_HC_SIGN;
+
+#ifdef CONFIG_USB_OHCI_SPHE8700_TD_FIX
+			/*clear td fix flag */
+			clr_td_fix_flag();
+#endif
+
+			if (enum_rx_active_flag[pdev->id - 1]) {
+				printk(KERN_NOTICE
+				       "rx-active,ohci reset finish\n");
+				up(&enum_rx_active_reset_sem[pdev->id - 1]);
+			}
+		} else {
+			sp_ohci->flag = 0;
 		}
-		for (rst = 0; rst < OHCI_MAX_RESETS; rst++) {
-			priv->resets[rst] =
-				devm_reset_control_get_shared_by_index(
-								&dev->dev, rst);
-			if (IS_ERR(priv->resets[rst])) {
-				err = PTR_ERR(priv->resets[rst]);
-				if (err == -EPROBE_DEFER)
-					goto err_reset;
-				priv->resets[rst] = NULL;
-				break;
+	} while (!kthread_should_stop());
+
+	return 0;
+}
+
+#endif
+
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
+
+static int ohci_notifier_call(struct notifier_block *self,
+			      unsigned long action, void *dev)
+{
+	struct usb_device *udev = (struct usb_device *)dev;
+
+	struct usb_hcd *hcd_e;
+	struct platform_device *pdev_e;
+	u32 *ptr;
+
+	struct ohci_hcd_sp *sp_ohci = container_of((void *)self,
+						   struct ohci_hcd_sp,
+						   ohci_notifier);
+	struct ohci_hcd *ohci = (struct ohci_hcd *)sp_ohci;
+	struct usb_hcd *hcd_o = ohci_to_hcd(ohci);
+	struct platform_device *pdev_o =
+	    to_platform_device(hcd_o->self.controller);
+
+	//printk("notifier ohci\n");
+
+	if (action == USB_DEVICE_ADD) {
+
+		if (!udev->parent) {	//roothub add
+
+			hcd_e = bus_to_hcd(udev->bus);
+			pdev_e = to_platform_device(hcd_e->self.controller);
+			ptr = (u32 *) ((u8 *) hcd_e->hcd_priv +
+				       hcd_e->driver->hcd_priv_size -
+				       sizeof(u32)
+			    );
+			//printk("notifier ohci %p 0x%x\n",ptr,*ptr);
+
+			//EHCI&OHCI on one port
+			if ((pdev_e != pdev_o) && (pdev_e->id == pdev_o->id)) {
+				if (ptr && (*ptr & RESET_SENDER)) {
+					sp_ohci->flag =
+					    RESET_HC_SIGN & (~RESET_UPHY_SIGN);
+					*ptr &= ~RESET_SENDER;
+#ifdef CONFIG_USB_HOST_RESET_SP
+					wake_up_interruptible(&hcd_o->
+							      reset_queue);
+#endif
+				}
 			}
-			err = reset_control_deassert(priv->resets[rst]);
-			if (err)
-				goto err_reset;
 		}
 	}
 
-	if (pdata->big_endian_desc)
-		ohci->flags |= OHCI_QUIRK_BE_DESC;
-	if (pdata->big_endian_mmio)
-		ohci->flags |= OHCI_QUIRK_BE_MMIO;
-	if (pdata->no_big_frame_no)
-		ohci->flags |= OHCI_QUIRK_FRAME_NO;
-	if (pdata->num_ports)
-		ohci->num_ports = pdata->num_ports;
+	return 0;
+}
+
+#endif
+
+#ifdef CONFIG_USB_SP_UDC_HOST
+
+static int udc_notifier_call(struct notifier_block *self,
+			     unsigned long action, void *dev)
+{
+	struct ohci_hcd_sp *sp_ohci = container_of((void *)self,
+						   struct ohci_hcd_sp,
+						   udc_notifier);
+	struct ohci_hcd *ohci = (struct ohci_hcd *)sp_ohci;
+	struct usb_hcd *hcd = ohci_to_hcd(ohci);
+
+	struct udc_hcd_platform_device *udc_dev =
+	    (struct udc_hcd_platform_device *)dev;
+
+	//u32 *grop1 = (u32*)VA_IOB_ADDR(1*32*4);
+	//u32 ret;
+
+	//printk("udc notifier %lx %x %p\n",action,hcd->rh_registered,hcd);
+
+	if (hcd->rh_registered == 1)
+		//usb_remove_hcd(hcd);
+
+		if (action == USB_DEVICE_ADD) {
+			//if(hcd->rh_registered == 1)
+			//      usb_remove_hcd(hcd);
+			//ret = ioread32(grop1 + 10);
+			//ret &= ~(1<<4);
+			//iowrite32(ret,grop1 + 10);
+			while (HC_IS_RUNNING(hcd->state))
+				msleep(1);
+			//SET_TO_UDC_OHCI(udc_dev->state);
+			SET_TO_UDC(udc_dev->state);
+		}
 
-#ifndef CONFIG_USB_OHCI_BIG_ENDIAN_MMIO
-	if (ohci->flags & OHCI_QUIRK_BE_MMIO) {
-		dev_err(&dev->dev,
-			"Error: CONFIG_USB_OHCI_BIG_ENDIAN_MMIO not set\n");
-		err = -EINVAL;
-		goto err_reset;
+	if (action == USB_DEVICE_REMOVE) {
+
+		//if(hcd->rh_registered == 1)
+		//      usb_remove_hcd(hcd);
+
+		//ret = ioread32(grop1 + 10);
+		//ret |= (1<<4);
+		//iowrite32(ret,grop1 + 10);
+
+		//usb_add_hcd(hcd, hcd->irq, IRQF_SHARED);
 	}
+
+	return 0;
+}
+
 #endif
-#ifndef CONFIG_USB_OHCI_BIG_ENDIAN_DESC
-	if (ohci->flags & OHCI_QUIRK_BE_DESC) {
-		dev_err(&dev->dev,
-			"Error: CONFIG_USB_OHCI_BIG_ENDIAN_DESC not set\n");
-		err = -EINVAL;
-		goto err_reset;
+
+#if 1				/*fix ohci msi */
+static ssize_t show_get_td_retry_time(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	printk(KERN_DEBUG "get get_td_retry_time\n");
+
+	return sprintf(buf, "%d\n", get_td_retry_time);
+}
+
+static ssize_t store_get_td_retry_time(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	printk(KERN_DEBUG "set get_td_retry_time\n");
+	if (kstrtouint(buf, 0, &get_td_retry_time) == 0) {
+		printk(KERN_DEBUG "%d\n", get_td_retry_time);
+	} else {
+		printk(KERN_NOTICE "set get_td_retry_time fail\n");
 	}
+
+	return count;
+}
+
+static DEVICE_ATTR(get_td_retry_time, S_IWUSR | S_IRUSR,
+		   show_get_td_retry_time, store_get_td_retry_time);
+#endif
+
+static struct usb_ohci_pdata usb_ohci_pdata = {
+};
+
+int ohci_platform_probe(struct platform_device *dev)
+{
+	struct usb_hcd *hcd;
+	struct resource *res_mem;
+	int irq;
+	int err = -ENOMEM;
+
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP) || defined(CONFIG_USB_SP_UDC_HOST)
+	struct ohci_hcd_sp *ohci_sp;
 #endif
 
-	if (pdata->power_on) {
-		err = pdata->power_on(dev);
-		if (err < 0)
-			goto err_reset;
+	//BUG_ON(!dev->dev.platform_data);
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	dev->dev.platform_data = &usb_ohci_pdata;
+	irq = platform_get_irq(dev, 0);
+	if (irq < 0) {
+		pr_err("no irq provieded");
+		return irq;
 	}
+	printk("ohci_id:%d,irq:%d\n",dev->id,irq);
 
 	res_mem = platform_get_resource(dev, IORESOURCE_MEM, 0);
-	hcd->regs = devm_ioremap_resource(&dev->dev, res_mem);
-	if (IS_ERR(hcd->regs)) {
-		err = PTR_ERR(hcd->regs);
-		goto err_power;
+	if (!res_mem) {
+		pr_err("no memory recourse provieded");
+		return -ENXIO;
 	}
+
+	hcd = usb_create_hcd(&ohci_platform_hc_driver, &dev->dev,
+			     dev_name(&dev->dev));
+	if (!hcd)
+		return -ENOMEM;
+
 	hcd->rsrc_start = res_mem->start;
 	hcd->rsrc_len = resource_size(res_mem);
 
+#ifdef	CONFIG_USB_USE_PLATFORM_RESOURCE
+	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
+		pr_err("controller already in use");
+		err = -EBUSY;
+		goto err_put_hcd;
+	}
+
+	hcd->regs = ioremap_nocache(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs)
+		goto err_release_region;
+#else
+	hcd->regs = (void *)res_mem->start;
+#endif
+#ifdef CONFIG_USB_HOST_NOT_FINISH_QTD_WHEN_DISC_WORKAROUND
+	tasklet_init(&hcd->host_irq_tasklet, ohci_irq_tasklet, (unsigned long)hcd);
+#endif
 	err = usb_add_hcd(hcd, irq, IRQF_SHARED);
 	if (err)
-		goto err_power;
-
-	device_wakeup_enable(hcd->self.controller);
+		goto err_iounmap;
 
 	platform_set_drvdata(dev, hcd);
 
-	return err;
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP) || defined(CONFIG_USB_SP_UDC_HOST)
+	ohci_sp = (struct ohci_hcd_sp *)hcd_to_ohci(hcd);
+#endif
 
-err_power:
-	if (pdata->power_off)
-		pdata->power_off(dev);
-err_reset:
-	while (--rst >= 0)
-		reset_control_assert(priv->resets[rst]);
-err_put_clks:
-	while (--clk >= 0)
-		clk_put(priv->clks[clk]);
-err_put_hcd:
-	if (pdata == &ohci_platform_defaults)
-		dev->dev.platform_data = NULL;
+#ifdef CONFIG_USB_SP_UDC_HOST
 
-	usb_put_hcd(hcd);
+	/*udc/host uphy notifier */
+	if (dev->id == 3) {
+		ohci_sp->udc_notifier.notifier_call = udc_notifier_call;
+		udc_register_notify(&ohci_sp->udc_notifier);
+	}
+#endif
 
+#if 1				/*fix ohci msi */
+	device_create_file(&dev->dev, &dev_attr_get_td_retry_time);
+#endif
+
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
+	//struct ohci_hcd_sp *ohci_sp = (struct ohci_hcd_sp *)hcd_to_ohci(hcd);
+	ohci_sp->ohci_notifier.notifier_call = ohci_notifier_call;
+	usb_register_notify(&ohci_sp->ohci_notifier);
+
+	ohci_sp->flag = 0;
+	printk(KERN_DEBUG "flag *** %d %d %p\n", sizeof(struct ohci_hcd_sp),
+	       hcd->driver->hcd_priv_size, &ohci_sp->flag);
+
+#ifdef 	CONFIG_USB_HOST_RESET
+	ohci_sp->reset_thread = kthread_create(ohci_reset_thread,
+					       hcd_to_ohci(hcd),
+					       "ohci_reset_polling");
+#elif defined(CONFIG_USB_HOST_RESET_SP)
+
+	init_waitqueue_head(&hcd->reset_queue);
+	hcd->ptr_flag = &ohci_sp->flag;
+
+	ohci_sp->reset_thread = kthread_create(ohci_reset_thread,
+					       hcd_to_ohci(hcd),
+					       "ohci_reset_wait_event");
+#endif
+	if (IS_ERR(ohci_sp->reset_thread)) {
+		pr_err("Create OHCI(%d) reset thread fail!\n", dev->id);
+		return err;
+	}
+
+	/* Tell the thread to start working */
+	wake_up_process(ohci_sp->reset_thread);
+
+#endif
+	return err;
+err_iounmap:
+#ifdef	CONFIG_USB_USE_PLATFORM_RESOURCE
+	iounmap(hcd->regs);
+err_release_region:
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+err_put_hcd:
+#endif
+	usb_put_hcd(hcd);
 	return err;
 }
 
-static int ohci_platform_remove(struct platform_device *dev)
+int ohci_platform_remove(struct platform_device *dev)
 {
 	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct usb_ohci_pdata *pdata = dev_get_platdata(&dev->dev);
-	struct ohci_platform_priv *priv = hcd_to_ohci_priv(hcd);
-	int clk, rst;
 
-	usb_remove_hcd(hcd);
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)|| defined(CONFIG_USB_SP_UDC_HOST)
+	struct ohci_hcd_sp *ohci_sp = (struct ohci_hcd_sp *)hcd_to_ohci(hcd);
+#endif
+
+#if 1				/*fix ohci msi */
+	device_remove_file(&dev->dev, &dev_attr_get_td_retry_time);
+#endif
 
-	if (pdata->power_off)
-		pdata->power_off(dev);
+#ifdef CONFIG_USB_SP_UDC_HOST
+	if (dev->id == 3)
+		udc_unregister_notify(&ohci_sp->udc_notifier);
+#endif
 
-	for (rst = 0; rst < OHCI_MAX_RESETS && priv->resets[rst]; rst++)
-		reset_control_assert(priv->resets[rst]);
+#if defined(CONFIG_USB_HOST_RESET) || defined(CONFIG_USB_HOST_RESET_SP)
+	kthread_stop(ohci_sp->reset_thread);
+	usb_unregister_notify(&ohci_sp->ohci_notifier);
+#endif
 
-	for (clk = 0; clk < OHCI_MAX_CLKS && priv->clks[clk]; clk++)
-		clk_put(priv->clks[clk]);
+	usb_remove_hcd(hcd);
 
+#ifdef	CONFIG_USB_USE_PLATFORM_RESOURCE
+	iounmap(hcd->regs);
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+#endif
 	usb_put_hcd(hcd);
-
-	if (pdata == &ohci_platform_defaults)
-		dev->dev.platform_data = NULL;
+	platform_set_drvdata(dev, NULL);
 
 	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
+#ifdef CONFIG_PM
+
 static int ohci_platform_suspend(struct device *dev)
 {
-	struct usb_hcd *hcd = dev_get_drvdata(dev);
-	struct usb_ohci_pdata *pdata = dev->platform_data;
-	struct platform_device *pdev = to_platform_device(dev);
-	bool do_wakeup = device_may_wakeup(dev);
-	int ret;
-
-	ret = ohci_suspend(hcd, do_wakeup);
-	if (ret)
-		return ret;
-
-	if (pdata->power_suspend)
-		pdata->power_suspend(pdev);
-
-	return ret;
+	return 0;
 }
 
 static int ohci_platform_resume(struct device *dev)
 {
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
-	struct usb_ohci_pdata *pdata = dev_get_platdata(dev);
-	struct platform_device *pdev = to_platform_device(dev);
-
-	if (pdata->power_on) {
-		int err = pdata->power_on(pdev);
-		if (err < 0)
-			return err;
-	}
 
-	ohci_resume(hcd, false);
+	ohci_finish_controller_resume(hcd);
 	return 0;
 }
-#endif /* CONFIG_PM_SLEEP */
-
-static const struct of_device_id ohci_platform_ids[] = {
-	{ .compatible = "generic-ohci", },
-	{ .compatible = "cavium,octeon-6335-ohci", },
-	{ }
-};
-MODULE_DEVICE_TABLE(of, ohci_platform_ids);
-
-static const struct platform_device_id ohci_platform_table[] = {
-	{ "ohci-platform", 0 },
-	{ }
-};
-MODULE_DEVICE_TABLE(platform, ohci_platform_table);
-
-static SIMPLE_DEV_PM_OPS(ohci_platform_pm_ops, ohci_platform_suspend,
-	ohci_platform_resume);
-
-static struct platform_driver ohci_platform_driver = {
-	.id_table	= ohci_platform_table,
-	.probe		= ohci_platform_probe,
-	.remove		= ohci_platform_remove,
-	.shutdown	= usb_hcd_platform_shutdown,
-	.driver		= {
-		.name	= "ohci-platform",
-		.pm	= &ohci_platform_pm_ops,
-		.of_match_table = ohci_platform_ids,
-	}
-};
-
-static int __init ohci_platform_init(void)
-{
-	if (usb_disabled())
-		return -ENODEV;
-
-	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
-
-	ohci_init_driver(&ohci_platform_hc_driver, &platform_overrides);
-	return platform_driver_register(&ohci_platform_driver);
-}
-module_init(ohci_platform_init);
 
-static void __exit ohci_platform_cleanup(void)
-{
-	platform_driver_unregister(&ohci_platform_driver);
-}
-module_exit(ohci_platform_cleanup);
+#else /* !CONFIG_PM */
+#define ohci_platform_suspend	NULL
+#define ohci_platform_resume	NULL
+#endif /* CONFIG_PM */
 
-MODULE_DESCRIPTION(DRIVER_DESC);
-MODULE_AUTHOR("Hauke Mehrtens");
-MODULE_AUTHOR("Alan Stern");
-MODULE_LICENSE("GPL");
