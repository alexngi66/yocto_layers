--- a/drivers/usb/core/hcd.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/core/hcd.c	2018-11-12 06:42:55.000000000 +0300
@@ -47,6 +47,7 @@
 #include <linux/usb/hcd.h>
 #include <linux/usb/phy.h>
 #include <linux/usb/otg.h>
+#include <linux/usb/sp_usb.h>
 
 #include "usb.h"
 
@@ -86,6 +87,36 @@
 
 /*-------------------------------------------------------------------------*/
 
+
+u8 sp_port_enabled = 0;
+EXPORT_SYMBOL_GPL(sp_port_enabled);
+
+bool enum_rx_active_flag[USB_PORT_NUM] = { false };
+EXPORT_SYMBOL(enum_rx_active_flag);
+
+struct semaphore enum_rx_active_reset_sem[USB_PORT_NUM];
+EXPORT_SYMBOL_GPL(enum_rx_active_reset_sem);
+
+uint accessory_port_id = USB_PORT0_ID;
+module_param(accessory_port_id, uint, 0644);
+EXPORT_SYMBOL_GPL(accessory_port_id);
+
+bool platform_device_mode_flag[USB_PORT_NUM] = { false };
+EXPORT_SYMBOL_GPL(platform_device_mode_flag);
+
+int uphy0_irq_num = -1;
+int uphy1_irq_num = -1;
+void __iomem *uphy0_base_addr = NULL;
+void __iomem *uphy1_base_addr = NULL;
+EXPORT_SYMBOL_GPL(uphy0_irq_num);
+EXPORT_SYMBOL_GPL(uphy1_irq_num);
+EXPORT_SYMBOL_GPL(uphy0_base_addr);
+EXPORT_SYMBOL_GPL(uphy1_base_addr);
+
+
+
+
+
 /* Keep track of which host controller drivers are loaded */
 unsigned long usb_hcds_loaded;
 EXPORT_SYMBOL_GPL(usb_hcds_loaded);
@@ -2232,6 +2263,65 @@
 	return hcd->driver->get_frame_number (hcd);
 }
 
+#ifdef CONFIG_USB_HOST_RESET_SP
+void Reset_usb_host_ctrler(struct usb_device *udev)
+{
+	struct usb_hcd *hcd;
+
+	hcd = bus_to_hcd(udev->bus);
+
+	if (hcd) {
+		printk(KERN_NOTICE "%s wake USB ctrl\n", __FUNCTION__);
+		*(hcd->ptr_flag) |= (RESET_HC_DEAD | RESET_UPHY_SIGN);
+		wake_up_interruptible(&hcd->reset_queue);
+	}
+}
+EXPORT_SYMBOL_GPL(Reset_usb_host_ctrler);
+
+void reset_usb_powerx(struct usb_hcd *hcd, int delayms)
+{
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
+	int port = pdev->id - 1;
+
+	if (port > USB_PORT1_ID) {		/*0 or 1 */
+		printk(KERN_NOTICE "power port=%d\n", port);
+		return;
+	}
+	printk(KERN_NOTICE "USB power ++ %d\n", delayms);
+	DISABLE_VBUS_POWER(port);
+	uphy_force_disc(1, port);
+	msleep(delayms);
+	printk(KERN_NOTICE "USB power -- %d\n", delayms);
+	uphy_force_disc(0, port);
+	ENABLE_VBUS_POWER(port);
+}
+EXPORT_SYMBOL_GPL(reset_usb_powerx);
+
+void Reset_Usb_PowerCtrl(int port, int on)
+{
+	if (port > USB_PORT1_ID)		/*0 or 1 */
+		return;
+		printk(KERN_NOTICE "USB power %d %s\n", port, on ? "on" : "off");
+	if (!on) {
+		DISABLE_VBUS_POWER(port);
+		uphy_force_disc(1, port);
+	} else {
+		uphy_force_disc(0, port);
+		ENABLE_VBUS_POWER(port);
+	}
+}
+EXPORT_SYMBOL_GPL(Reset_Usb_PowerCtrl);
+
+void Usb_dev_power_reset(struct usb_device *udev, int delayms)
+{
+	struct usb_hcd *hcd = bus_to_hcd(udev->bus);
+	if (hcd) {
+		reset_usb_powerx(hcd, delayms);
+	}
+}
+EXPORT_SYMBOL_GPL(Usb_dev_power_reset);
+#endif	/* CONFIG_USB_HOST_RESET_SP */
+
 /*-------------------------------------------------------------------------*/
 
 #ifdef	CONFIG_PM
@@ -2416,6 +2506,55 @@
 
 #endif
 
+#ifdef CONFIG_USB_PHY_RX_ACTIVE_QUESTION_WORKAROUND
+#define	UPHY_IRQ_OFFSET		19
+extern bool enum_rx_active_flag[USB_PORT_NUM];
+irqreturn_t usb_uphy_irq(int irq, void *__hcd)
+{
+	u32 uphy_val;
+	int port_num = -1;
+	volatile u32 *uphy_disc;
+	unsigned long flags;
+	struct usb_hcd *hcd = __hcd;
+	void __iomem *reg_addr;
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
+
+	local_irq_save(flags);
+
+	port_num = pdev->id - 1;
+	if(USB_PORT0_ID == port_num){
+		reg_addr = uphy0_base_addr;
+	} else if(USB_PORT1_ID == port_num){
+		reg_addr = uphy1_base_addr;
+	}
+
+	uphy_val = readl(reg_addr + UPHY_INTR_OFFSET);
+	uphy_val |= 0x02;
+	writel(uphy_val, reg_addr + UPHY_INTR_OFFSET);
+	uphy_val = readl(reg_addr + UPHY_INTR_OFFSET);
+	while (uphy_val & 0x80) {
+		printk(KERN_NOTICE "usb_uphy_irq,v:0x%x\n", uphy_val);
+		uphy_val = readl(reg_addr + UPHY_INTR_OFFSET);
+	}
+
+	uphy_val &= ~0x02;
+	writel(uphy_val, reg_addr + UPHY_INTR_OFFSET);
+
+	if (hcd->enum_flag[pdev->id - 1]) {
+		hcd->enum_flag[pdev->id - 1] = false;
+		enum_rx_active_flag[pdev->id - 1] = true;
+		printk(KERN_NOTICE "rx-active question happen during enum\n");
+	}
+#ifdef CONFIG_USB_HOST_RESET_SP
+	*(hcd->ptr_flag) |= (RESET_HC_DEAD | RESET_UPHY_SIGN);
+	wake_up_interruptible(&hcd->reset_queue);
+#endif
+
+	local_irq_restore(flags);
+	return IRQ_HANDLED;
+}
+#endif	/* WORKAROUND_HW_BUG_RX_ACTIVE_QUESTION */
+
 /*-------------------------------------------------------------------------*/
 
 /**
@@ -2505,6 +2644,7 @@
 		struct device *sysdev, struct device *dev, const char *bus_name,
 		struct usb_hcd *primary_hcd)
 {
+	int i;
 	struct usb_hcd *hcd;
 
 	hcd = kzalloc(sizeof(*hcd) + driver->hcd_priv_size, GFP_KERNEL);
@@ -2559,6 +2699,28 @@
 	hcd->speed = driver->flags & HCD_MASK;
 	hcd->product_desc = (driver->product_desc) ? driver->product_desc :
 			"USB Host Controller";
+	hcd->hub_thread = NULL;
+	hcd->current_active_urb = NULL;
+	hcd->enum_msg_flag = false;
+	hcd->enum_flag = (bool *) kmalloc(sizeof(*hcd->enum_flag)
+					  * USB_PORT_NUM, GFP_KERNEL);
+	if (!hcd->enum_flag) {
+		kfree(hcd);
+		dev_dbg(dev, "hcd enum_flag alloc failed\n");
+		return NULL;
+	}
+	hcd->uphy_disconnect_level =
+	    (u32 *)kmalloc(sizeof(*hcd->uphy_disconnect_level)
+			    * USB_PORT_NUM, GFP_KERNEL);
+	if (!hcd->uphy_disconnect_level) {
+		kfree(hcd);
+		dev_dbg(dev, "hcd uphy_disconnect_level alloc failed\n");
+		return NULL;
+	}
+	for (i = 0; i < USB_PORT_NUM; i++) {
+		hcd->enum_flag[i] = false;
+		hcd->uphy_disconnect_level[i] = 0;
+	}
 	return hcd;
 }
 EXPORT_SYMBOL_GPL(__usb_create_hcd);
@@ -2631,6 +2793,12 @@
 		kfree(hcd->address0_mutex);
 		kfree(hcd->bandwidth_mutex);
 	}
+	if (hcd->enum_flag)
+		kfree(hcd->enum_flag);
+
+	if (hcd->uphy_disconnect_level)
+		kfree(hcd->uphy_disconnect_level);
+
 	mutex_unlock(&usb_port_peer_mutex);
 	kfree(hcd);
 }
@@ -2729,6 +2897,13 @@
 {
 	int retval;
 	struct usb_device *rhdev;
+#ifdef CONFIG_USB_PHY_RX_ACTIVE_QUESTION_WORKAROUND
+	u32 uphy_val;
+	int uphy_irq_ret = -1;
+	volatile u32 *uphy_disc;
+	int port_num;
+	struct platform_device *pdev;
+#endif
 
 	if (IS_ENABLED(CONFIG_USB_PHY) && !hcd->usb_phy) {
 		struct usb_phy *phy = usb_get_phy_dev(hcd->self.sysdev, 0);
@@ -2900,6 +3075,42 @@
 	if (hcd->uses_new_polling && HCD_POLL_RH(hcd))
 		usb_hcd_poll_rh_status(hcd);
 
+#ifdef CONFIG_USB_PHY_RX_ACTIVE_QUESTION_WORKAROUND
+	pdev = to_platform_device(hcd->self.controller);
+	if (hcd->driver->relinquish_port && pdev) {
+		port_num = pdev->id - 1;
+		switch (port_num) {
+		case 0:
+			hcd->uphy_irq_num = uphy0_irq_num;
+			uphy_val = readl(uphy0_base_addr + UPHY_INTR_OFFSET);
+			uphy_val |= 0x01;
+			writel(uphy_val, uphy0_base_addr + UPHY_INTR_OFFSET);
+			break;
+		case 1:
+			hcd->uphy_irq_num = uphy1_irq_num;
+			uphy_val = readl(uphy1_base_addr + UPHY_INTR_OFFSET);
+			uphy_val |= 0x01;
+			writel(uphy_val, uphy1_base_addr + UPHY_INTR_OFFSET);
+			break;
+		}
+
+		uphy_irq_ret = request_irq(hcd->uphy_irq_num,
+					   &usb_uphy_irq, IRQF_SHARED,
+					   "uphy-irq", hcd);
+		if (uphy_irq_ret) {
+			printk(KERN_NOTICE
+			       "requeset uphy irq fail,v:%x,r:%x,pn:%x,num:%x\n",
+			       uphy_val, uphy_irq_ret, port_num,
+			       hcd->uphy_irq_num);
+		} else {
+			printk(KERN_NOTICE
+			       "requeset uphy irq sucess,v:%x,r:%x,pn:%x,num:%x\n",
+			       uphy_val, uphy_irq_ret, port_num,
+			       hcd->uphy_irq_num);
+		}
+	}
+#endif
+
 	return retval;
 
 error_create_attr_group:
@@ -3015,6 +3226,12 @@
 	if (usb_hcd_is_primary_hcd(hcd)) {
 		if (hcd->irq > 0)
 			free_irq(hcd->irq, hcd);
+#ifdef CONFIG_USB_PHY_RX_ACTIVE_QUESTION_WORKAROUND
+		if (hcd->uphy_irq_num > 0) {
+			free_irq(hcd->uphy_irq_num, hcd);
+			printk(KERN_DEBUG "free uphy irq\n");
+		}
+#endif
 	}
 
 	usb_deregister_bus(&hcd->self);
