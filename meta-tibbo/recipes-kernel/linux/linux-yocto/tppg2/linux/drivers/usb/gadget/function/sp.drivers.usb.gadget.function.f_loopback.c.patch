--- a/drivers/usb/gadget/function/f_loopback.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/gadget/function/f_loopback.c	2018-11-12 06:42:55.000000000 +0300
@@ -15,12 +15,11 @@
 #include <linux/slab.h>
 #include <linux/kernel.h>
 #include <linux/device.h>
-#include <linux/module.h>
-#include <linux/err.h>
-#include <linux/usb/composite.h>
 
 #include "g_zero.h"
-#include "u_f.h"
+#include <linux/usb/gadget_chips.h>
+
+
 
 /*
  * LOOPBACK FUNCTION ... a testing vehicle for USB peripherals,
@@ -28,15 +27,17 @@
  * This takes messages of various sizes written OUT to a device, and loops
  * them back so they can be read IN from it.  It has been used by certain
  * test applications.  It supports limited testing of data queueing logic.
+ *
+ *
+ * This is currently packaged as a configuration driver, which can't be
+ * combined with other functions to make composite devices.  However, it
+ * can be combined with other independent configurations.
  */
 struct f_loopback {
 	struct usb_function	function;
 
 	struct usb_ep		*in_ep;
 	struct usb_ep		*out_ep;
-
-	unsigned                qlen;
-	unsigned                buflen;
 };
 
 static inline struct f_loopback *func_to_loop(struct usb_function *f)
@@ -44,10 +45,14 @@
 	return container_of(f, struct f_loopback, function);
 }
 
+static unsigned qlen = 32;
+module_param(qlen, uint, 0);
+MODULE_PARM_DESC(qlenn, "depth of loopback queue");
+
 /*-------------------------------------------------------------------------*/
 
 static struct usb_interface_descriptor loopback_intf = {
-	.bLength =		sizeof(loopback_intf),
+	.bLength =		sizeof loopback_intf,
 	.bDescriptorType =	USB_DT_INTERFACE,
 
 	.bNumEndpoints =	2,
@@ -115,7 +120,7 @@
 	.wMaxPacketSize =	cpu_to_le16(1024),
 };
 
-static struct usb_ss_ep_comp_descriptor ss_loop_source_comp_desc = {
+struct usb_ss_ep_comp_descriptor ss_loop_source_comp_desc = {
 	.bLength =		USB_DT_SS_EP_COMP_SIZE,
 	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
 	.bMaxBurst =		0,
@@ -131,7 +136,7 @@
 	.wMaxPacketSize =	cpu_to_le16(1024),
 };
 
-static struct usb_ss_ep_comp_descriptor ss_loop_sink_comp_desc = {
+struct usb_ss_ep_comp_descriptor ss_loop_sink_comp_desc = {
 	.bLength =		USB_DT_SS_EP_COMP_SIZE,
 	.bDescriptorType =	USB_DT_SS_ENDPOINT_COMP,
 	.bMaxBurst =		0,
@@ -167,12 +172,12 @@
 
 /*-------------------------------------------------------------------------*/
 
-static int loopback_bind(struct usb_configuration *c, struct usb_function *f)
+static int __init
+loopback_bind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct usb_composite_dev *cdev = c->cdev;
 	struct f_loopback	*loop = func_to_loop(f);
 	int			id;
-	int ret;
 
 	/* allocate interface ID(s) */
 	id = usb_interface_id(c, f);
@@ -180,12 +185,6 @@
 		return id;
 	loopback_intf.bInterfaceNumber = id;
 
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_loopback[0].id = id;
-	loopback_intf.iInterface = id;
-
 	/* allocate endpoints */
 
 	loop->in_ep = usb_ep_autoconfig(cdev->gadget, &fs_loop_source_desc);
@@ -195,25 +194,30 @@
 			f->name, cdev->gadget->name);
 		return -ENODEV;
 	}
+	loop->in_ep->driver_data = cdev;	/* claim */
 
 	loop->out_ep = usb_ep_autoconfig(cdev->gadget, &fs_loop_sink_desc);
 	if (!loop->out_ep)
 		goto autoconf_fail;
+	loop->out_ep->driver_data = cdev;	/* claim */
 
 	/* support high speed hardware */
-	hs_loop_source_desc.bEndpointAddress =
-		fs_loop_source_desc.bEndpointAddress;
-	hs_loop_sink_desc.bEndpointAddress = fs_loop_sink_desc.bEndpointAddress;
+	if (gadget_is_dualspeed(c->cdev->gadget)) {
+		hs_loop_source_desc.bEndpointAddress =
+				fs_loop_source_desc.bEndpointAddress;
+		hs_loop_sink_desc.bEndpointAddress =
+				fs_loop_sink_desc.bEndpointAddress;
+		f->hs_descriptors = hs_loopback_descs;
+	}
 
 	/* support super speed hardware */
-	ss_loop_source_desc.bEndpointAddress =
-		fs_loop_source_desc.bEndpointAddress;
-	ss_loop_sink_desc.bEndpointAddress = fs_loop_sink_desc.bEndpointAddress;
-
-	ret = usb_assign_descriptors(f, fs_loopback_descs, hs_loopback_descs,
-			ss_loopback_descs, NULL);
-	if (ret)
-		return ret;
+	if (gadget_is_superspeed(c->cdev->gadget)) {
+		ss_loop_source_desc.bEndpointAddress =
+				fs_loop_source_desc.bEndpointAddress;
+		ss_loop_sink_desc.bEndpointAddress =
+				fs_loop_sink_desc.bEndpointAddress;
+		f->ss_descriptors = ss_loopback_descs;
+	}
 
 	DBG(cdev, "%s speed %s: IN/%s, OUT/%s\n",
 	    (gadget_is_superspeed(c->cdev->gadget) ? "super" :
@@ -222,17 +226,9 @@
 	return 0;
 }
 
-static void lb_free_func(struct usb_function *f)
+static void
+loopback_unbind(struct usb_configuration *c, struct usb_function *f)
 {
-	struct f_lb_opts *opts;
-
-	opts = container_of(f->fi, struct f_lb_opts, func_inst);
-
-	mutex_lock(&opts->lock);
-	opts->refcnt--;
-	mutex_unlock(&opts->lock);
-
-	usb_free_all_descriptors(f);
 	kfree(func_to_loop(f));
 }
 
@@ -243,38 +239,31 @@
 	int			status = req->status;
 
 	switch (status) {
+
 	case 0:				/* normal completion? */
 		if (ep == loop->out_ep) {
-			/*
-			 * We received some data from the host so let's
-			 * queue it so host can read the from our in ep
-			 */
-			struct usb_request *in_req = req->context;
-
-			in_req->zero = (req->actual < req->length);
-			in_req->length = req->actual;
-			ep = loop->in_ep;
-			req = in_req;
-		} else {
-			/*
-			 * We have just looped back a bunch of data
-			 * to host. Now let's wait for some more data.
-			 */
-			req = req->context;
-			ep = loop->out_ep;
+			/* loop this OUT packet back IN to the host */
+			req->zero = (req->actual < req->length);
+			req->length = req->actual;
+			status = usb_ep_queue(loop->in_ep, req, GFP_ATOMIC);
+			if (status == 0)
+				return;
+
+			/* "should never get here" */
+			ERROR(cdev, "can't loop %s to %s: %d\n",
+				ep->name, loop->in_ep->name,
+				status);
 		}
 
-		/* queue the buffer back to host or for next bunch of data */
-		status = usb_ep_queue(ep, req, GFP_ATOMIC);
-		if (status == 0) {
+		/* queue the buffer for some later OUT packet */
+		req->length = buflen;
+		status = usb_ep_queue(loop->out_ep, req, GFP_ATOMIC);
+		if (status == 0)
 			return;
-		} else {
-			ERROR(cdev, "Unable to loop back buffer to %s: %d\n",
-			      ep->name, status);
-			goto free_req;
-		}
 
 		/* "should never get here" */
+		/* FALLTHROUGH */
+
 	default:
 		ERROR(cdev, "%s loop complete --> %d, %d/%d\n", ep->name,
 				status, req->actual, req->length);
@@ -288,10 +277,6 @@
 	case -ECONNABORTED:		/* hardware forced ep reset */
 	case -ECONNRESET:		/* request dequeued */
 	case -ESHUTDOWN:		/* disconnect from host */
-free_req:
-		usb_ep_free_request(ep == loop->in_ep ?
-				    loop->out_ep : loop->in_ep,
-				    req->context);
 		free_ep_req(ep, req);
 		return;
 	}
@@ -302,109 +287,65 @@
 	struct usb_composite_dev	*cdev;
 
 	cdev = loop->function.config->cdev;
-	disable_endpoints(cdev, loop->in_ep, loop->out_ep, NULL, NULL);
+	disable_endpoints(cdev, loop->in_ep, loop->out_ep);
 	VDBG(cdev, "%s disabled\n", loop->function.name);
 }
 
-static inline struct usb_request *lb_alloc_ep_req(struct usb_ep *ep, int len)
-{
-	return alloc_ep_req(ep, len);
-}
-
-static int alloc_requests(struct usb_composite_dev *cdev,
-			  struct f_loopback *loop)
-{
-	struct usb_request *in_req, *out_req;
-	int i;
-	int result = 0;
-
-	/*
-	 * allocate a bunch of read buffers and queue them all at once.
-	 * we buffer at most 'qlen' transfers; We allocate buffers only
-	 * for out transfer and reuse them in IN transfers to implement
-	 * our loopback functionality
-	 */
-	for (i = 0; i < loop->qlen && result == 0; i++) {
-		result = -ENOMEM;
-
-		in_req = usb_ep_alloc_request(loop->in_ep, GFP_ATOMIC);
-		if (!in_req)
-			goto fail;
-
-		out_req = lb_alloc_ep_req(loop->out_ep, loop->buflen);
-		if (!out_req)
-			goto fail_in;
-
-		in_req->complete = loopback_complete;
-		out_req->complete = loopback_complete;
-
-		in_req->buf = out_req->buf;
-		/* length will be set in complete routine */
-		in_req->context = out_req;
-		out_req->context = in_req;
-
-		result = usb_ep_queue(loop->out_ep, out_req, GFP_ATOMIC);
-		if (result) {
-			ERROR(cdev, "%s queue req --> %d\n",
-					loop->out_ep->name, result);
-			goto fail_out;
-		}
-	}
-
-	return 0;
-
-fail_out:
-	free_ep_req(loop->out_ep, out_req);
-fail_in:
-	usb_ep_free_request(loop->in_ep, in_req);
-fail:
-	return result;
-}
-
-static int enable_endpoint(struct usb_composite_dev *cdev,
-			   struct f_loopback *loop, struct usb_ep *ep)
+static int
+enable_loopback(struct usb_composite_dev *cdev, struct f_loopback *loop)
 {
-	int					result;
+	int					result = 0;
+	struct usb_ep				*ep;
+	struct usb_request			*req;
+	unsigned				i;
 
+	/* one endpoint writes data back IN to the host */
+	ep = loop->in_ep;
 	result = config_ep_by_speed(cdev->gadget, &(loop->function), ep);
 	if (result)
-		goto out;
-
+		return result;
 	result = usb_ep_enable(ep);
 	if (result < 0)
-		goto out;
+		return result;
 	ep->driver_data = loop;
-	result = 0;
-
-out:
-	return result;
-}
-
-static int
-enable_loopback(struct usb_composite_dev *cdev, struct f_loopback *loop)
-{
-	int					result = 0;
 
-	result = enable_endpoint(cdev, loop, loop->in_ep);
+	/* one endpoint just reads OUT packets */
+	ep = loop->out_ep;
+	result = config_ep_by_speed(cdev->gadget, &(loop->function), ep);
 	if (result)
-		goto out;
+		goto fail0;
 
-	result = enable_endpoint(cdev, loop, loop->out_ep);
-	if (result)
-		goto disable_in;
+	result = usb_ep_enable(ep);
+	if (result < 0) {
+fail0:
+		ep = loop->in_ep;
+		usb_ep_disable(ep);
+		ep->driver_data = NULL;
+		return result;
+	}
+	ep->driver_data = loop;
 
-	result = alloc_requests(cdev, loop);
-	if (result)
-		goto disable_out;
+	/* allocate a bunch of read buffers and queue them all at once.
+	 * we buffer at most 'qlen' transfers; fewer if any need more
+	 * than 'buflen' bytes each.
+	 */
+	for (i = 0; i < qlen && result == 0; i++) {
+		req = alloc_ep_req(ep);
+		if (req) {
+			req->complete = loopback_complete;
+			result = usb_ep_queue(ep, req, GFP_ATOMIC);
+			if (result)
+				ERROR(cdev, "%s queue req --> %d\n",
+						ep->name, result);
+		} else {
+			usb_ep_disable(ep);
+			ep->driver_data = NULL;
+			result = -ENOMEM;
+			goto fail0;
+		}
+	}
 
 	DBG(cdev, "%s enabled\n", loop->function.name);
-	return 0;
-
-disable_out:
-	usb_ep_disable(loop->out_ep);
-disable_in:
-	usb_ep_disable(loop->in_ep);
-out:
 	return result;
 }
 
@@ -415,7 +356,8 @@
 	struct usb_composite_dev *cdev = f->config->cdev;
 
 	/* we know alt is zero */
-	disable_loopback(loop);
+	if (loop->in_ep->driver_data)
+		disable_loopback(loop);
 	return enable_loopback(cdev, loop);
 }
 
@@ -426,177 +368,64 @@
 	disable_loopback(loop);
 }
 
-static struct usb_function *loopback_alloc(struct usb_function_instance *fi)
+/*-------------------------------------------------------------------------*/
+
+static int __init loopback_bind_config(struct usb_configuration *c)
 {
 	struct f_loopback	*loop;
-	struct f_lb_opts	*lb_opts;
+	int			status;
 
 	loop = kzalloc(sizeof *loop, GFP_KERNEL);
 	if (!loop)
-		return ERR_PTR(-ENOMEM);
-
-	lb_opts = container_of(fi, struct f_lb_opts, func_inst);
-
-	mutex_lock(&lb_opts->lock);
-	lb_opts->refcnt++;
-	mutex_unlock(&lb_opts->lock);
-
-	loop->buflen = lb_opts->bulk_buflen;
-	loop->qlen = lb_opts->qlen;
-	if (!loop->qlen)
-		loop->qlen = 32;
+		return -ENOMEM;
 
 	loop->function.name = "loopback";
+	loop->function.fs_descriptors = fs_loopback_descs;
 	loop->function.bind = loopback_bind;
+	loop->function.unbind = loopback_unbind;
 	loop->function.set_alt = loopback_set_alt;
 	loop->function.disable = loopback_disable;
-	loop->function.strings = loopback_strings;
-
-	loop->function.free_func = lb_free_func;
-
-	return &loop->function;
-}
 
-static inline struct f_lb_opts *to_f_lb_opts(struct config_item *item)
-{
-	return container_of(to_config_group(item), struct f_lb_opts,
-			    func_inst.group);
-}
-
-static void lb_attr_release(struct config_item *item)
-{
-	struct f_lb_opts *lb_opts = to_f_lb_opts(item);
-
-	usb_put_function_instance(&lb_opts->func_inst);
-}
-
-static struct configfs_item_operations lb_item_ops = {
-	.release		= lb_attr_release,
-};
-
-static ssize_t f_lb_opts_qlen_show(struct config_item *item, char *page)
-{
-	struct f_lb_opts *opts = to_f_lb_opts(item);
-	int result;
-
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%d\n", opts->qlen);
-	mutex_unlock(&opts->lock);
-
-	return result;
-}
-
-static ssize_t f_lb_opts_qlen_store(struct config_item *item,
-				    const char *page, size_t len)
-{
-	struct f_lb_opts *opts = to_f_lb_opts(item);
-	int ret;
-	u32 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
-	}
-
-	ret = kstrtou32(page, 0, &num);
-	if (ret)
-		goto end;
-
-	opts->qlen = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_lb_opts_, qlen);
-
-static ssize_t f_lb_opts_bulk_buflen_show(struct config_item *item, char *page)
+	status = usb_add_function(c, &loop->function);
+	if (status)
+		kfree(loop);
+	return status;
+}
+
+static struct usb_configuration loopback_driver = {
+	.label		= "loopback",
+	.strings	= loopback_strings,
+	.bConfigurationValue = 2,
+	.bmAttributes	= USB_CONFIG_ATT_SELFPOWER,
+	/* .iConfiguration = DYNAMIC */
+};
+
+/**
+ * loopback_add - add a loopback testing configuration to a device
+ * @cdev: the device to support the loopback configuration
+ */
+int __init loopback_add(struct usb_composite_dev *cdev, bool autoresume)
 {
-	struct f_lb_opts *opts = to_f_lb_opts(item);
-	int result;
+	int id;
 
-	mutex_lock(&opts->lock);
-	result = sprintf(page, "%d\n", opts->bulk_buflen);
-	mutex_unlock(&opts->lock);
+	/* allocate string ID(s) */
+	id = usb_string_id(cdev);
+	if (id < 0)
+		return id;
+	strings_loopback[0].id = id;
 
-	return result;
-}
+	loopback_intf.iInterface = id;
+	loopback_driver.iConfiguration = id;
 
-static ssize_t f_lb_opts_bulk_buflen_store(struct config_item *item,
-				    const char *page, size_t len)
-{
-	struct f_lb_opts *opts = to_f_lb_opts(item);
-	int ret;
-	u32 num;
-
-	mutex_lock(&opts->lock);
-	if (opts->refcnt) {
-		ret = -EBUSY;
-		goto end;
+	/* support autoresume for remote wakeup testing */
+	if (autoresume)
+		loopback_driver.bmAttributes |= USB_CONFIG_ATT_WAKEUP;
+
+	/* support OTG systems */
+	if (gadget_is_otg(cdev->gadget)) {
+		loopback_driver.descriptors = otg_desc;
+		loopback_driver.bmAttributes |= USB_CONFIG_ATT_WAKEUP;
 	}
 
-	ret = kstrtou32(page, 0, &num);
-	if (ret)
-		goto end;
-
-	opts->bulk_buflen = num;
-	ret = len;
-end:
-	mutex_unlock(&opts->lock);
-	return ret;
-}
-
-CONFIGFS_ATTR(f_lb_opts_, bulk_buflen);
-
-static struct configfs_attribute *lb_attrs[] = {
-	&f_lb_opts_attr_qlen,
-	&f_lb_opts_attr_bulk_buflen,
-	NULL,
-};
-
-static struct config_item_type lb_func_type = {
-	.ct_item_ops    = &lb_item_ops,
-	.ct_attrs	= lb_attrs,
-	.ct_owner       = THIS_MODULE,
-};
-
-static void lb_free_instance(struct usb_function_instance *fi)
-{
-	struct f_lb_opts *lb_opts;
-
-	lb_opts = container_of(fi, struct f_lb_opts, func_inst);
-	kfree(lb_opts);
-}
-
-static struct usb_function_instance *loopback_alloc_instance(void)
-{
-	struct f_lb_opts *lb_opts;
-
-	lb_opts = kzalloc(sizeof(*lb_opts), GFP_KERNEL);
-	if (!lb_opts)
-		return ERR_PTR(-ENOMEM);
-	mutex_init(&lb_opts->lock);
-	lb_opts->func_inst.free_func_inst = lb_free_instance;
-	lb_opts->bulk_buflen = GZERO_BULK_BUFLEN;
-	lb_opts->qlen = GZERO_QLEN;
-
-	config_group_init_type_name(&lb_opts->func_inst.group, "",
-				    &lb_func_type);
-
-	return  &lb_opts->func_inst;
+	return usb_add_config(cdev, &loopback_driver, loopback_bind_config);
 }
-DECLARE_USB_FUNCTION(Loopback, loopback_alloc_instance, loopback_alloc);
-
-int __init lb_modinit(void)
-{
-	return usb_function_register(&Loopbackusb_func);
-}
-
-void __exit lb_modexit(void)
-{
-	usb_function_unregister(&Loopbackusb_func);
-}
-
-MODULE_LICENSE("GPL");
