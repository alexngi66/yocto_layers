--- a/drivers/usb/host/ehci-platform.c	2017-09-20 09:25:38.000000000 +0300
+++ a/drivers/usb/host/ehci-platform.c	2018-11-12 06:42:55.000000000 +0300
@@ -3,7 +3,6 @@
  *
  * Copyright 2007 Steven Brown <sbrown@cortland.com>
  * Copyright 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>
- * Copyright 2014 Hans de Goede <hdegoede@redhat.com>
  *
  * Derived from the ohci-ssb driver
  * Copyright 2007 Michael Buesch <m@bues.ch>
@@ -19,437 +18,709 @@
  *
  * Licensed under the GNU/GPL. See COPYING for details.
  */
-#include <linux/acpi.h>
-#include <linux/clk.h>
-#include <linux/dma-mapping.h>
-#include <linux/err.h>
-#include <linux/kernel.h>
-#include <linux/hrtimer.h>
-#include <linux/io.h>
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/phy/phy.h>
 #include <linux/platform_device.h>
-#include <linux/reset.h>
-#include <linux/usb.h>
-#include <linux/usb/hcd.h>
 #include <linux/usb/ehci_pdriver.h>
-#include <linux/usb/of.h>
-
-#include "ehci.h"
-
-#define DRIVER_DESC "EHCI generic platform driver"
-#define EHCI_MAX_CLKS 4
-#define EHCI_MAX_RSTS 4
-#define hcd_to_ehci_priv(h) ((struct ehci_platform_priv *)hcd_to_ehci(h)->priv)
-
-struct ehci_platform_priv {
-	struct clk *clks[EHCI_MAX_CLKS];
-	struct reset_control *rsts[EHCI_MAX_RSTS];
-	struct phy **phys;
-	int num_phys;
-	bool reset_on_resume;
-};
-
-static const char hcd_name[] = "ehci-platform";
+#include <linux/kthread.h>
+#include <linux/usb/otg.h>
+#include <mach/io_map.h>
+#include <linux/usb/sp_usb.h>
 
 static int ehci_platform_reset(struct usb_hcd *hcd)
 {
 	struct platform_device *pdev = to_platform_device(hcd->self.controller);
-	struct usb_ehci_pdata *pdata = dev_get_platdata(&pdev->dev);
+	struct usb_ehci_pdata *pdata = pdev->dev.platform_data;
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+	int port_num = pdev->id - 1;
 	int retval;
 
+	hcd->has_tt = pdata->has_tt;
 	ehci->has_synopsys_hc_bug = pdata->has_synopsys_hc_bug;
-
-	if (pdata->pre_setup) {
-		retval = pdata->pre_setup(hcd);
-		if (retval < 0)
-			return retval;
-	}
+	ehci->big_endian_desc = pdata->big_endian_desc;
+	ehci->big_endian_mmio = pdata->big_endian_mmio;
 
 	ehci->caps = hcd->regs + pdata->caps_offset;
 	retval = ehci_setup(hcd);
 	if (retval)
 		return retval;
 
-	if (pdata->no_io_watchdog)
-		ehci->need_io_watchdog = 0;
+	if (pdata->port_power_on)
+		ehci_port_power(ehci, port_num, 1);
+	if (pdata->port_power_off)
+		ehci_port_power(ehci, port_num, 0);
+
 	return 0;
 }
 
-static int ehci_platform_power_on(struct platform_device *dev)
+static const struct hc_driver ehci_platform_hc_driver = {
+	.description = hcd_name,
+	.product_desc = "Generic Platform EHCI Controller",
+#ifdef	CONFIG_USB_HOST_RESET_SP
+	.hcd_priv_size = sizeof(struct ehci_hcd_sp),
+#else
+	.hcd_priv_size = sizeof(struct ehci_hcd),
+#endif
+
+	.irq = ehci_irq,
+	.flags = HCD_MEMORY | HCD_USB2,
+
+	.reset = ehci_platform_reset,
+	.start = ehci_run,
+	.stop = ehci_stop,
+	.shutdown = ehci_shutdown,
+
+#ifdef CONFIG_USB_LOGO_TEST
+	/*
+	 * usb logo test support
+	 */
+	.usb_logo_test = ehci_usb_logo_test,
+#endif
+
+	.urb_enqueue = ehci_urb_enqueue,
+	.urb_dequeue = ehci_urb_dequeue,
+	.endpoint_disable = ehci_endpoint_disable,
+	.endpoint_reset = ehci_endpoint_reset,
+
+	.get_frame_number = ehci_get_frame,
+
+	.hub_status_data = ehci_hub_status_data,
+	.hub_control = ehci_hub_control,
+#if defined(CONFIG_PM)
+	.bus_suspend = ehci_bus_suspend,
+	.bus_resume = ehci_bus_resume,
+#endif
+	.relinquish_port = ehci_relinquish_port,
+	.port_handed_over = ehci_port_handed_over,
+
+	.clear_tt_buffer_complete = ehci_clear_tt_buffer_complete,
+	.get_port_status_from_register = ehci_get_port_status_from_register,
+};
+
+#ifdef	CONFIG_USB_HOST_RESET_SP
+#define 	RESET_UPHY(x,ret,addr)	{				\
+				ret	 = readl(addr);		\
+				ret |= (1<<(9+x))|(1<<(12+x));		\
+				writel(ret,addr);			\
+				ret &= ~((1<<(9+x))|(1<<(12+x)));	\
+				writel(ret,addr);			\
+			}
+#define		REG_UPHY_RESET_OFFSET	(18)
+#endif
+
+#ifdef	CONFIG_USB_HOST_RESET_SP
+extern void reset_usb_powerx(struct usb_hcd *hcd, int delayms);
+
+#ifdef CONFIG_USB_GADGET_SUNPLUS
+extern void usb_switch(int device);
+#ifdef FIX_MULTIPLE_RESET_PROBLEM
+extern void ctrl_rx_squelch(void);
+#endif
+extern void detech_start(void);
+#endif
+
+#ifdef CONFIG_USB_LOGO_TEST
+extern u32 usb_logo_test_start;
+#endif
+
+static int ehci_reset_thread(void *arg)
 {
-	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct ehci_platform_priv *priv = hcd_to_ehci_priv(hcd);
-	int clk, ret, phy_num;
+	struct ehci_hcd *ehci = (struct ehci_hcd *)arg;
+	struct ehci_hcd_sp *sp_ehci = (struct ehci_hcd_sp *)arg;
+	struct usb_hcd *hcd = ehci_to_hcd(ehci);
+	struct platform_device *pdev = to_platform_device(hcd->self.controller);
+
+	int i;
+	u32 flag;
+	void __iomem *reg_addr;
+
+	do {
+
+NEXT_LOOP:
+
+		msleep(10);
+		wait_event_interruptible(hcd->reset_queue,
+					 ((sp_ehci->flag & (RESET_UPHY_SIGN |
+							    RESET_HC_SIGN)) !=
+					  0)
+					 || kthread_should_stop());
+
+		if (kthread_should_stop()) {
+			printk("%s is stoped!\n", __func__);
+			break;
+		}
+#ifdef CONFIG_USB_LOGO_TEST
+		if (usb_logo_test_start == 1) {
+			sp_ehci->flag = 0;
+			continue;
+		}
+#endif
+
+		/*besure nothing on hcd bus */
+		for (i = 1; i < 128 / (8 * sizeof(unsigned long)); i++) {
+
+			if (unlikely(sp_ehci->flag & RESET_HC_DEAD))
+				break;
+
+			if (hcd->self.devmap.devicemap[i]) {
+				sp_ehci->flag = 0;
+				goto NEXT_LOOP;
+			}
+		}
+
+		if ((hcd->self.devmap.devicemap[0] == 2)
+		    || unlikely(sp_ehci->flag & RESET_HC_DEAD)) {
+
+			flag = sp_ehci->flag;
+			clear_bit(HCD_FLAG_DEAD, &hcd->flags);
+
+			usb_remove_hcd(hcd);
+
+			if (flag & RESET_UPHY_SIGN) {
+				reg_addr = (pdev->id - 1) ? uphy1_base_addr : uphy0_base_addr;
+				hcd->uphy_disconnect_level[pdev->id - 1] = readl(reg_addr + DISC_LEVEL_OFFSET);
+				reset_uphy(pdev->id - 1);
+				reinit_uphy(pdev->id - 1);
+				writel(hcd->uphy_disconnect_level[pdev->id - 1], reg_addr + DISC_LEVEL_OFFSET);
+				/*tell ohci reset controllor */
+				sp_ehci->flag = RESET_SENDER;
+#ifdef CONFIG_USB_GADGET_SUNPLUS
+				printk(KERN_NOTICE
+				       "port_num:%d,device_mode_flag:%d\n",
+				       pdev->id - 1,
+				       platform_device_mode_flag[pdev->id - 1]);
+				if (platform_device_mode_flag[pdev->id - 1]) {
+					platform_device_mode_flag[pdev->id -
+								  1] = false;
+					msleep(1);
+					usb_switch(1);
+					msleep(1);
+#ifdef FIX_MULTIPLE_RESET_PROBLEM
+					/*control squelch signal */
+					ctrl_rx_squelch();
+					msleep(1);
+#endif
+					detech_start();
+				}
+#endif
+			}
+
+			msleep(100);
+
+			usb_add_hcd(hcd, hcd->irq, IRQF_DISABLED | IRQF_SHARED);
+
+			sp_ehci->flag &= ~RESET_HC_SIGN;
+		} else {
+			sp_ehci->flag = 0;
+		}
+	} while (!kthread_should_stop());
+	return 0;
+}
+#endif
 
-	for (clk = 0; clk < EHCI_MAX_CLKS && priv->clks[clk]; clk++) {
-		ret = clk_prepare_enable(priv->clks[clk]);
-		if (ret)
-			goto err_disable_clks;
-	}
-
-	for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-		ret = phy_init(priv->phys[phy_num]);
-		if (ret)
-			goto err_exit_phy;
-		ret = phy_power_on(priv->phys[phy_num]);
-		if (ret) {
-			phy_exit(priv->phys[phy_num]);
-			goto err_exit_phy;
+#ifdef	CONFIG_USB_HOST_RESET_SP
+static int ehci_notifier_call(struct notifier_block *self,
+			      unsigned long action, void *dev)
+{
+	struct usb_device *udev = (struct usb_device *)dev;
+	struct usb_hcd *hcd_o;
+	struct platform_device *pdev_o;
+	u32 *ptr;
+
+	struct ehci_hcd_sp *sp_ehci = container_of((void *)self,
+						   struct ehci_hcd_sp,
+						   ehci_notifier);
+	struct ehci_hcd *ehci = (struct ehci_hcd *)sp_ehci;
+	struct usb_hcd *hcd_e = ehci_to_hcd(ehci);
+	struct platform_device *pdev_e =
+	    to_platform_device(hcd_e->self.controller);
+
+	if (action == USB_DEVICE_ADD) {
+		if (!udev->parent) {	// roothub add
+			hcd_o = bus_to_hcd(udev->bus);
+			pdev_o = to_platform_device(hcd_o->self.controller);
+			ptr = (u32 *) ((u8 *) hcd_o->hcd_priv +
+				       hcd_o->driver->hcd_priv_size -
+				       sizeof(u32)
+			    );
+
+			//EHCI&OHCI on one port
+			if ((pdev_e != pdev_o) && (pdev_e->id == pdev_o->id)) {
+				if (ptr && (*ptr & RESET_SENDER)) {
+					sp_ehci->flag =
+					    RESET_HC_SIGN & (~RESET_UPHY_SIGN);
+					*ptr &= ~RESET_SENDER;
+					wake_up_interruptible(&hcd_e->
+							      reset_queue);
+				}
+			}
 		}
 	}
 
 	return 0;
+}
+#endif
+
+#ifdef CONFIG_SWITCH_USB_ROLE
+
+#ifdef CONFIG_PM_WARP
+static u32 fb_restore = 0;
+#endif
+
+#define USB_UPHY_REG	(3)
+
+static ssize_t show_usb_role(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	//struct platform_device *pdev = to_platform_device(dev);
+
+	return 0;
+}
+
+static ssize_t store_usb_role(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t count)
+{
+#if 0
+	struct platform_device *pdev = to_platform_device(dev);
+	//struct usb_hcd *hcd = (struct usb_hcd *)platform_get_drvdata(pdev);
+	//struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+
+	u32 switch_usb_role;
+	volatile u32 *grop1 = (u32 *) VA_IOB_ADDR(2 * 32 * 4);
+	u32 ret;
+
+	/* 0:host , 1:device */
+	if (kstrtouint(buf, 0, &switch_usb_role) == 0) {
+		//printk("usb rold -> %x\n", switch_usb_role);
+		ret = ioread32(grop1 + USB_UPHY_REG);
+
+		ret |= (1 << ((pdev->id - 1) * 8 + 4));
+		if (switch_usb_role & 0x1) {
+			ret &= ~(1 << ((pdev->id - 1) * 8 + 5));
+			ret |= (1 << ((pdev->id - 1) * 8 + 6));
+		} else
+			ret |= (3 << ((pdev->id - 1) * 8 + 5));
 
-err_exit_phy:
-	while (--phy_num >= 0) {
-		phy_power_off(priv->phys[phy_num]);
-		phy_exit(priv->phys[phy_num]);
+		//printk("usb ret -> %x\n", ret);
+		iowrite32(ret, grop1 + USB_UPHY_REG);
 	}
-err_disable_clks:
-	while (--clk >= 0)
-		clk_disable_unprepare(priv->clks[clk]);
+#endif
+	return count;
+}
+
+static DEVICE_ATTR(usb_role_switch,
+		   S_IWUSR | S_IRUSR, show_usb_role, store_usb_role);
 
-	return ret;
+/* switch usb speed ( fs/hs ) */
+static ssize_t show_usb_speed(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct usb_hcd *hcd = (struct usb_hcd *)platform_get_drvdata(pdev);
+	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+
+	u32 result;
+
+	result = ehci_readl(ehci, &ehci->regs->configured_flag);
+
+	return sprintf(buf, "%d\n", result);
 }
 
-static void ehci_platform_power_off(struct platform_device *dev)
+#define MAX_PORT_NUM  					2
+#define POWER_RESET_TIME 				500
+#define ENABLE_FORCE_HOST_DISCONNECT    1
+#define DISABLE_FORCE_HOST_DISCONNECT   0
+static ssize_t store_usb_speed(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf, size_t count)
 {
-	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct ehci_platform_priv *priv = hcd_to_ehci_priv(hcd);
-	int clk, phy_num;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct usb_hcd *hcd = (struct usb_hcd *)platform_get_drvdata(pdev);
+	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+	int port_num = pdev->id - 1;
 
-	for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-		phy_power_off(priv->phys[phy_num]);
-		phy_exit(priv->phys[phy_num]);
+	u32 usb_host_owner;
+
+	/* 0:full speed 1:high speed */
+	if (kstrtouint(buf, 0, &usb_host_owner) == 0) {
+		if (port_num < MAX_PORT_NUM) {
+			DISABLE_VBUS_POWER(port_num);
+			uphy_force_disc(ENABLE_FORCE_HOST_DISCONNECT, port_num);
+			msleep(POWER_RESET_TIME);
+			ehci_writel(ehci,
+				    FLAG_CF & usb_host_owner,
+				    &ehci->regs->configured_flag);
+			uphy_force_disc(DISABLE_FORCE_HOST_DISCONNECT,
+					port_num);
+			ENABLE_VBUS_POWER(port_num);
+		} else if (MAX_PORT_NUM == port_num) {
+			printk(KERN_NOTICE
+			       "warning,port 2 is not supported to power reset\n");
+			ehci_writel(ehci,
+				    FLAG_CF & usb_host_owner,
+				    &ehci->regs->configured_flag);
+		} else {
+			printk(KERN_NOTICE "error port num:%d\n", port_num);
+		}
 	}
 
-	for (clk = EHCI_MAX_CLKS - 1; clk >= 0; clk--)
-		if (priv->clks[clk])
-			clk_disable_unprepare(priv->clks[clk]);
+	return count;
 }
 
-static struct hc_driver __read_mostly ehci_platform_hc_driver;
+static DEVICE_ATTR(usb_speed_switch,
+		   S_IWUSR | S_IRUSR, show_usb_speed, store_usb_speed);
 
-static const struct ehci_driver_overrides platform_overrides __initconst = {
-	.reset =		ehci_platform_reset,
-	.extra_priv_size =	sizeof(struct ehci_platform_priv),
-};
+static ssize_t show_usb_swing(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	return sprintf(buf, "%d\n", get_uphy_swing(pdev->id - 1));
+}
+
+static ssize_t store_usb_swing(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf, size_t count)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	//struct usb_hcd *hcd = (struct usb_hcd *)platform_get_drvdata(pdev);
+	//struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+
+	u32 swing_val;
+
+	if (kstrtouint(buf, 0, &swing_val) == 0) {
+		set_uphy_swing(swing_val, pdev->id - 1);
+	}
+
+	return count;
+}
+
+static DEVICE_ATTR(usb_uphy_swing,
+		   S_IWUSR | S_IRUSR, show_usb_swing, store_usb_swing);
+
+static ssize_t show_usb_disconnect_level(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	u32 disc_level;
 
-static struct usb_ehci_pdata ehci_platform_defaults = {
-	.power_on =		ehci_platform_power_on,
-	.power_suspend =	ehci_platform_power_off,
-	.power_off =		ehci_platform_power_off,
+	disc_level = get_disconnect_level(pdev->id - 1);
+	printk(KERN_DEBUG
+	       "port:%d,get disconnect level:0x%x\n", pdev->id - 1, disc_level);
+
+	return sprintf(buf, "0x%x\n", disc_level);
+}
+
+static ssize_t store_usb_disconnect_level(struct device *dev,
+					  struct device_attribute *attr,
+					  const char *buf, size_t count)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	u32 disc_level;
+
+	if (kstrtouint(buf, 0, &disc_level) == 0) {
+		printk(KERN_DEBUG
+		       "port:%d,set disconnect level:0x%x\n",
+		       pdev->id - 1, disc_level);
+		set_disconnect_level(disc_level, pdev->id - 1);
+	}
+
+	return count;
+}
+
+static DEVICE_ATTR(usb_disconnect_level,
+		   S_IWUSR | S_IRUSR, show_usb_disconnect_level,
+		   store_usb_disconnect_level);
+
+static ssize_t store_usb_ctrl_reset(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct usb_hcd *hcd = (struct usb_hcd *)platform_get_drvdata(pdev);
+	/*struct ehci_hcd *ehci = hcd_to_ehci(hcd); */
+	u32 val = 1;
+
+	if (kstrtouint(buf, 0, &val)) {
+		return 1;
+	}
+
+	if (NULL == hcd) {
+		printk("store_usb_ctrl_reset: usb controller invalid\n");
+		return count;
+	}
+	printk("Will reset usb controller val=%d\n", val);
+#ifdef CONFIG_USB_HOST_RESET_SP
+	if (val == 1) {
+		printk("%s wake usb ctrl\n", __FUNCTION__);
+		*(hcd->ptr_flag) |= (RESET_HC_DEAD | RESET_UPHY_SIGN);
+		wake_up_interruptible(&hcd->reset_queue);
+	} else if (val > 500) {
+		printk("power reset %d ms \n", val);
+		reset_usb_powerx(hcd, val);
+	}
+#endif
+
+	return count;
+}
+
+static DEVICE_ATTR(usb_ctrl_reset, S_IWUSR, NULL, store_usb_ctrl_reset);
+
+#endif
+
+static struct usb_ehci_pdata usb_ehci_pdata = {
 };
 
-static int ehci_platform_probe(struct platform_device *dev)
+int ehci_platform_probe(struct platform_device *dev)
 {
 	struct usb_hcd *hcd;
 	struct resource *res_mem;
-	struct usb_ehci_pdata *pdata = dev_get_platdata(&dev->dev);
-	struct ehci_platform_priv *priv;
-	struct ehci_hcd *ehci;
-	int err, irq, phy_num, clk = 0, rst;
+	int irq;
+	int err = -ENOMEM;
+#ifdef CONFIG_USB_SUNPLUS_OTG
+	struct usb_phy *otg_phy;
+#endif
 
-	if (usb_disabled())
-		return -ENODEV;
+#ifdef CONFIG_USB_HOST_RESET_SP
+	struct ehci_hcd_sp *ehci_sp;
+#endif
 
-	/*
-	 * Use reasonable defaults so platforms don't have to provide these
-	 * with DT probing on ARM.
-	 */
-	if (!pdata)
-		pdata = &ehci_platform_defaults;
+	//BUG_ON(!dev->dev.platform_data);
 
-	err = dma_coerce_mask_and_coherent(&dev->dev,
-		pdata->dma_mask_64 ? DMA_BIT_MASK(64) : DMA_BIT_MASK(32));
-	if (err) {
-		dev_err(&dev->dev, "Error: DMA mask configuration failed\n");
-		return err;
-	}
+	if (usb_disabled())
+		return -ENODEV;
 
+	dev->dev.platform_data = &usb_ehci_pdata;
 	irq = platform_get_irq(dev, 0);
 	if (irq < 0) {
-		dev_err(&dev->dev, "no irq provided");
+		pr_err("no irq provieded,ret:%d\n",irq);
 		return irq;
 	}
+	printk("ehci_id:%d,irq:%d\n",dev->id,irq);
+
+	res_mem = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	if (!res_mem) {
+		pr_err("no memory recourse provieded");
+		return -ENXIO;
+	}
 
 	hcd = usb_create_hcd(&ehci_platform_hc_driver, &dev->dev,
 			     dev_name(&dev->dev));
 	if (!hcd)
 		return -ENOMEM;
 
-	platform_set_drvdata(dev, hcd);
-	dev->dev.platform_data = pdata;
-	priv = hcd_to_ehci_priv(hcd);
-	ehci = hcd_to_ehci(hcd);
-
-	if (pdata == &ehci_platform_defaults && dev->dev.of_node) {
-		if (of_property_read_bool(dev->dev.of_node, "big-endian-regs"))
-			ehci->big_endian_mmio = 1;
-
-		if (of_property_read_bool(dev->dev.of_node, "big-endian-desc"))
-			ehci->big_endian_desc = 1;
-
-		if (of_property_read_bool(dev->dev.of_node, "big-endian"))
-			ehci->big_endian_mmio = ehci->big_endian_desc = 1;
-
-		if (of_property_read_bool(dev->dev.of_node,
-					  "needs-reset-on-resume"))
-			priv->reset_on_resume = true;
-
-		if (of_property_read_bool(dev->dev.of_node,
-					  "has-transaction-translator"))
-			hcd->has_tt = 1;
-
-		priv->num_phys = of_count_phandle_with_args(dev->dev.of_node,
-				"phys", "#phy-cells");
-
-		if (priv->num_phys > 0) {
-			priv->phys = devm_kcalloc(&dev->dev, priv->num_phys,
-					    sizeof(struct phy *), GFP_KERNEL);
-			if (!priv->phys)
-				return -ENOMEM;
-		} else
-			priv->num_phys = 0;
-
-		for (phy_num = 0; phy_num < priv->num_phys; phy_num++) {
-			priv->phys[phy_num] = devm_of_phy_get_by_index(
-					&dev->dev, dev->dev.of_node, phy_num);
-			if (IS_ERR(priv->phys[phy_num])) {
-				err = PTR_ERR(priv->phys[phy_num]);
-					goto err_put_hcd;
-			} else if (!hcd->phy) {
-				/* Avoiding phy_get() in usb_add_hcd() */
-				hcd->phy = priv->phys[phy_num];
-			}
-		}
+	hcd->rsrc_start = res_mem->start;
+	hcd->rsrc_len = resource_size(res_mem);
 
-		for (clk = 0; clk < EHCI_MAX_CLKS; clk++) {
-			priv->clks[clk] = of_clk_get(dev->dev.of_node, clk);
-			if (IS_ERR(priv->clks[clk])) {
-				err = PTR_ERR(priv->clks[clk]);
-				if (err == -EPROBE_DEFER)
-					goto err_put_clks;
-				priv->clks[clk] = NULL;
-				break;
-			}
-		}
+#ifdef CONFIG_USB_USE_PLATFORM_RESOURCE
+	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
+		pr_err("controller already in use");
+		err = -EBUSY;
+		goto err_put_hcd;
 	}
 
-	for (rst = 0; rst < EHCI_MAX_RSTS; rst++) {
-		priv->rsts[rst] = devm_reset_control_get_shared_by_index(
-					&dev->dev, rst);
-		if (IS_ERR(priv->rsts[rst])) {
-			err = PTR_ERR(priv->rsts[rst]);
-			if (err == -EPROBE_DEFER)
-				goto err_reset;
-			priv->rsts[rst] = NULL;
-			break;
-		}
+	hcd->regs = ioremap_nocache(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs)
+		goto err_release_region;
+#else
+	hcd->regs = (void *)res_mem->start;
+#endif
+	tasklet_init(&hcd->host_irq_tasklet, ehci_irq_tasklet, (unsigned long)hcd);
+	err = usb_add_hcd(hcd, irq, IRQF_SHARED);
+	printk("hcd_irq:%d,%d\n",hcd->irq,irq);
+	if (err)
+		goto err_iounmap;
+
+	platform_set_drvdata(dev, hcd);
+/****************************************************/
+#ifdef CONFIG_USB_HOST_RESET_SP
+	ehci_sp = (struct ehci_hcd_sp *)hcd_to_ehci(hcd);
+#endif
 
-		err = reset_control_deassert(priv->rsts[rst]);
-		if (err)
-			goto err_reset;
-	}
-
-	if (pdata->big_endian_desc)
-		ehci->big_endian_desc = 1;
-	if (pdata->big_endian_mmio)
-		ehci->big_endian_mmio = 1;
-	if (pdata->has_tt)
-		hcd->has_tt = 1;
-	if (pdata->reset_on_resume)
-		priv->reset_on_resume = true;
-
-#ifndef CONFIG_USB_EHCI_BIG_ENDIAN_MMIO
-	if (ehci->big_endian_mmio) {
-		dev_err(&dev->dev,
-			"Error: CONFIG_USB_EHCI_BIG_ENDIAN_MMIO not set\n");
-		err = -EINVAL;
-		goto err_reset;
-	}
-#endif
-#ifndef CONFIG_USB_EHCI_BIG_ENDIAN_DESC
-	if (ehci->big_endian_desc) {
-		dev_err(&dev->dev,
-			"Error: CONFIG_USB_EHCI_BIG_ENDIAN_DESC not set\n");
-		err = -EINVAL;
-		goto err_reset;
+#ifdef CONFIG_USB_SUNPLUS_OTG
+	if (dev->id < 3) {
+		otg_phy = usb_get_transceiver_sunplus(dev->id - 1);
+		err = otg_set_host(otg_phy->otg, &hcd->self);
+		if (err < 0) {
+			dev_err(&pdev->dev,
+				"unable to register with transceiver\n");
+			goto err_iounmap;
+		}
 	}
 #endif
 
-	if (pdata->power_on) {
-		err = pdata->power_on(dev);
-		if (err < 0)
-			goto err_reset;
+#ifdef CONFIG_SWITCH_USB_ROLE
+	if (dev->id < 3) {
+		device_create_file(&dev->dev, &dev_attr_usb_role_switch);
+		device_create_file(&dev->dev, &dev_attr_usb_ctrl_reset);
 	}
 
-	res_mem = platform_get_resource(dev, IORESOURCE_MEM, 0);
-	hcd->regs = devm_ioremap_resource(&dev->dev, res_mem);
-	if (IS_ERR(hcd->regs)) {
-		err = PTR_ERR(hcd->regs);
-		goto err_power;
+	device_create_file(&dev->dev, &dev_attr_usb_speed_switch);
+	device_create_file(&dev->dev, &dev_attr_usb_uphy_swing);
+	device_create_file(&dev->dev, &dev_attr_usb_disconnect_level);
+#endif
+
+#ifdef CONFIG_USB_HOST_RESET_SP
+	ehci_sp->flag = 0;
+
+	printk("flag ***%p %p %d %d %p\n", hcd, hcd->hcd_priv,
+	       sizeof(struct ehci_hcd_sp), hcd->driver->hcd_priv_size,
+	       &ehci_sp->flag);
+
+	/* ohci reset uphy notifier */
+	ehci_sp->ehci_notifier.notifier_call = ehci_notifier_call;
+	usb_register_notify(&ehci_sp->ehci_notifier);
+
+	init_waitqueue_head(&hcd->reset_queue);
+	hcd->ptr_flag = &ehci_sp->flag;
+
+	ehci_sp->reset_thread = kthread_create(ehci_reset_thread,
+					       hcd_to_ehci(hcd),
+					       "ehci_reset_wait_event");
+
+	if (IS_ERR(ehci_sp->reset_thread)) {
+		pr_err("Create EHCI(%d) reset thread fail!\n", dev->id);
+		return err;
 	}
-	hcd->rsrc_start = res_mem->start;
-	hcd->rsrc_len = resource_size(res_mem);
 
-	err = usb_add_hcd(hcd, irq, IRQF_SHARED);
-	if (err)
-		goto err_power;
+	/* Tell the thread to start working */
+	wake_up_process(ehci_sp->reset_thread);
 
-	device_wakeup_enable(hcd->self.controller);
-	device_enable_async_suspend(hcd->self.controller);
-	platform_set_drvdata(dev, hcd);
+#endif
 
 	return err;
 
-err_power:
-	if (pdata->power_off)
-		pdata->power_off(dev);
-err_reset:
-	while (--rst >= 0)
-		reset_control_assert(priv->rsts[rst]);
-err_put_clks:
-	while (--clk >= 0)
-		clk_put(priv->clks[clk]);
+err_iounmap:
+#ifdef CONFIG_USB_USE_PLATFORM_RESOURCE
+	iounmap(hcd->regs);
+err_release_region:
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
 err_put_hcd:
-	if (pdata == &ehci_platform_defaults)
-		dev->dev.platform_data = NULL;
-
+#endif
 	usb_put_hcd(hcd);
-
 	return err;
 }
 
-static int ehci_platform_remove(struct platform_device *dev)
+int ehci_platform_remove(struct platform_device *dev)
 {
 	struct usb_hcd *hcd = platform_get_drvdata(dev);
-	struct usb_ehci_pdata *pdata = dev_get_platdata(&dev->dev);
-	struct ehci_platform_priv *priv = hcd_to_ehci_priv(hcd);
-	int clk, rst;
 
-	usb_remove_hcd(hcd);
+#ifdef CONFIG_USB_HOST_RESET_SP
+	struct ehci_hcd_sp *ehci_sp = (struct ehci_hcd_sp *)hcd_to_ehci(hcd);
+#endif
+
+#ifdef CONFIG_SWITCH_USB_ROLE
+	if (dev->id < 3) {
+		device_remove_file(&dev->dev, &dev_attr_usb_role_switch);
+		device_remove_file(&dev->dev, &dev_attr_usb_ctrl_reset);
+	}
 
-	if (pdata->power_off)
-		pdata->power_off(dev);
+	device_remove_file(&dev->dev, &dev_attr_usb_speed_switch);
+	device_remove_file(&dev->dev, &dev_attr_usb_uphy_swing);
+	device_remove_file(&dev->dev, &dev_attr_usb_disconnect_level);
+#endif
 
-	for (rst = 0; rst < EHCI_MAX_RSTS && priv->rsts[rst]; rst++)
-		reset_control_assert(priv->rsts[rst]);
+#ifdef	CONFIG_USB_HOST_RESET_SP
+	if (dev->id < 3) {
+		//kthread_stop(ehci_sp->reset_thread);
+		usb_unregister_notify(&ehci_sp->ehci_notifier);
+	}
+#endif
 
-	for (clk = 0; clk < EHCI_MAX_CLKS && priv->clks[clk]; clk++)
-		clk_put(priv->clks[clk]);
+	usb_remove_hcd(hcd);
 
-	usb_put_hcd(hcd);
+#ifdef CONFIG_USB_USE_PLATFORM_RESOURCE
+	iounmap(hcd->regs);
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+#endif
 
-	if (pdata == &ehci_platform_defaults)
-		dev->dev.platform_data = NULL;
+	usb_put_hcd(hcd);
+	platform_set_drvdata(dev, NULL);
 
 	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
+#ifdef CONFIG_PM
+
 static int ehci_platform_suspend(struct device *dev)
 {
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
-	struct usb_ehci_pdata *pdata = dev_get_platdata(dev);
-	struct platform_device *pdev = to_platform_device(dev);
-	bool do_wakeup = device_may_wakeup(dev);
-	int ret;
-
-	ret = ehci_suspend(hcd, do_wakeup);
-	if (ret)
-		return ret;
+	bool wakeup = device_may_wakeup(dev);
 
-	if (pdata->power_suspend)
-		pdata->power_suspend(pdev);
-
-	return ret;
+	ehci_prepare_ports_for_controller_suspend(hcd_to_ehci(hcd), wakeup);
+	return 0;
 }
 
 static int ehci_platform_resume(struct device *dev)
 {
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
-	struct usb_ehci_pdata *pdata = dev_get_platdata(dev);
-	struct platform_device *pdev = to_platform_device(dev);
-	struct ehci_platform_priv *priv = hcd_to_ehci_priv(hcd);
-	struct device *companion_dev;
 
-	if (pdata->power_on) {
-		int err = pdata->power_on(pdev);
-		if (err < 0)
-			return err;
-	}
-
-	companion_dev = usb_of_get_companion_dev(hcd->self.controller);
-	if (companion_dev) {
-		device_pm_wait_for_dev(hcd->self.controller, companion_dev);
-		put_device(companion_dev);
-	}
-
-	ehci_resume(hcd, priv->reset_on_resume);
+	ehci_prepare_ports_for_controller_resume(hcd_to_ehci(hcd));
 	return 0;
 }
-#endif /* CONFIG_PM_SLEEP */
 
-static const struct of_device_id vt8500_ehci_ids[] = {
-	{ .compatible = "via,vt8500-ehci", },
-	{ .compatible = "wm,prizm-ehci", },
-	{ .compatible = "generic-ehci", },
-	{ .compatible = "cavium,octeon-6335-ehci", },
-	{}
-};
-MODULE_DEVICE_TABLE(of, vt8500_ehci_ids);
+#ifdef CONFIG_PM_WARP
 
-static const struct acpi_device_id ehci_acpi_match[] = {
-	{ "PNP0D20", 0 }, /* EHCI controller without debug */
-	{ }
-};
-MODULE_DEVICE_TABLE(acpi, ehci_acpi_match);
+int sp_ehci_fb_resume(struct platform_device *dev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(dev);
+	extern int warp_fastboot;
 
-static const struct platform_device_id ehci_platform_table[] = {
-	{ "ehci-platform", 0 },
-	{ }
-};
-MODULE_DEVICE_TABLE(platform, ehci_platform_table);
+#ifdef CONFIG_USB_HOST_RESET_SP
+	struct ehci_hcd_sp *ehci_sp = (struct ehci_hcd_sp *)hcd_to_ehci(hcd);
+#endif
 
-static SIMPLE_DEV_PM_OPS(ehci_platform_pm_ops, ehci_platform_suspend,
-	ehci_platform_resume);
+	if (warp_fastboot) {
 
-static struct platform_driver ehci_platform_driver = {
-	.id_table	= ehci_platform_table,
-	.probe		= ehci_platform_probe,
-	.remove		= ehci_platform_remove,
-	.shutdown	= usb_hcd_platform_shutdown,
-	.driver		= {
-		.name	= "ehci-platform",
-		.pm	= &ehci_platform_pm_ops,
-		.of_match_table = vt8500_ehci_ids,
-		.acpi_match_table = ACPI_PTR(ehci_acpi_match),
-	}
-};
+		usb_add_hcd(hcd, hcd->irq, IRQF_DISABLED | IRQF_SHARED);
 
-static int __init ehci_platform_init(void)
-{
-	if (usb_disabled())
-		return -ENODEV;
+#ifdef CONFIG_USB_HOST_RESET_SP
+
+		ehci_sp->reset_thread = kthread_create(ehci_reset_thread,
+						       hcd_to_ehci(hcd),
+						       "ehci_reset_wait_event");
 
-	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+		ehci_sp->ehci_notifier.notifier_call = ehci_notifier_call;
+		usb_register_notify(&ehci_sp->ehci_notifier);
+
+		wake_up_process(ehci_sp->reset_thread);
+#endif
 
-	ehci_init_driver(&ehci_platform_hc_driver, &platform_overrides);
-	return platform_driver_register(&ehci_platform_driver);
+	}
+
+	else {
+		ehci_platform_resume(&dev->dev);
+	}
+
+	return 0;
 }
-module_init(ehci_platform_init);
 
-static void __exit ehci_platform_cleanup(void)
+int sp_ehci_fb_suspend(struct platform_device *dev, pm_message_t state)
 {
-	platform_driver_unregister(&ehci_platform_driver);
+	struct usb_hcd *hcd = platform_get_drvdata(dev);
+	extern int warp_fastboot;
+
+#ifdef CONFIG_USB_HOST_RESET_SP
+	struct ehci_hcd_sp *ehci_sp = (struct ehci_hcd_sp *)hcd_to_ehci(hcd);
+#endif
+
+	if (warp_fastboot) {
+#ifdef CONFIG_USB_HOST_RESET_SP
+		kthread_stop(ehci_sp->reset_thread);
+		usb_unregister_notify(&ehci_sp->ehci_notifier);
+#endif
+		usb_remove_hcd(hcd);
+	}
+
+	else {
+		ehci_platform_suspend(&dev->dev);
+	}
+
+	return 0;
 }
-module_exit(ehci_platform_cleanup);
+#endif
 
-MODULE_DESCRIPTION(DRIVER_DESC);
-MODULE_AUTHOR("Hauke Mehrtens");
-MODULE_AUTHOR("Alan Stern");
-MODULE_LICENSE("GPL");
+#else /* !CONFIG_PM */
+#define ehci_platform_suspend	NULL
+#define ehci_platform_resume	NULL
+#endif /* CONFIG_PM */
