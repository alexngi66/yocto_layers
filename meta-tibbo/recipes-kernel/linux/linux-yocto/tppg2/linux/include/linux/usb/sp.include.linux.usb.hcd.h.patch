--- a/include/linux/usb/hcd.h	2017-09-20 09:25:38.000000000 +0300
+++ a/include/linux/usb/hcd.h	2018-11-12 06:42:56.000000000 +0300
@@ -205,6 +205,29 @@
 #define	HC_IS_RUNNING(state) ((state) & __ACTIVE)
 #define	HC_IS_SUSPENDED(state) ((state) & __SUSPEND)
 
+#ifdef CONFIG_USB_HOST_RESET_SP
+	wait_queue_head_t reset_queue;
+	u32 *ptr_flag;
+	u32 idle;
+#define RESET_UPHY_SIGN	(1<<0)
+#define	RESET_HC_SIGN	(1<<1)
+#define RESET_HC_DEAD	(1<<2)
+#define RESET_HC_CNT	(1<<3)
+#define RESET_HC_IPHONE	(1<<30)
+#define RESET_SENDER	(1<<31)
+#endif
+
+	u8 enum_msg_flag;
+	int uphy_irq_num;
+	int hub_port_num;
+	int enum_port_status;
+
+	bool *enum_flag;
+	u32 *uphy_disconnect_level;
+	struct task_struct *hub_thread;
+	struct urb *current_active_urb;
+	struct tasklet_struct host_irq_tasklet;
+
 	/* more shared queuing code would be good; it should support
 	 * smarter scheduling, handle transaction translators, etc;
 	 * input size of periodic table to an interrupt scheduler.
@@ -276,6 +299,11 @@
 	/* shutdown HCD */
 	void	(*shutdown) (struct usb_hcd *hcd);
 
+#ifdef CONFIG_USB_LOGO_TEST
+	/*  remon add for usb logo test */
+	int (*usb_logo_test) (struct usb_hcd * hcd, int idProduct);
+#endif
+
 	/* return current frame number */
 	int	(*get_frame_number) (struct usb_hcd *hcd);
 
@@ -398,7 +426,7 @@
 	int	(*find_raw_port_number)(struct usb_hcd *, int);
 	/* Call for power on/off the port if necessary */
 	int	(*port_power)(struct usb_hcd *hcd, int portnum, bool enable);
-
+	int (*get_port_status_from_register) (struct usb_hcd * hcd);
 };
 
 static inline int hcd_giveback_urb_in_bh(struct usb_hcd *hcd)
@@ -457,6 +485,15 @@
 struct platform_device;
 extern void usb_hcd_platform_shutdown(struct platform_device *dev);
 
+#include <linux/platform_device.h>
+static inline int usb_hcd_get_pl_id(struct usb_hcd *hcd)
+{
+	struct platform_device *pdev;
+
+	pdev = to_platform_device(hcd->self.controller);
+	return pdev->id;
+}
+
 #ifdef CONFIG_USB_PCI
 struct pci_dev;
 struct pci_device_id;
