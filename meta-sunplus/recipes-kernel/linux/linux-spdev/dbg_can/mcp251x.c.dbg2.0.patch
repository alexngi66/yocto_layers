--- a/drivers/net/can/spi/mcp251x.c	2020-09-17 19:35:50.754017183 +0300
+++ a/drivers/net/can/spi/mcp251x.c	2020-09-17 19:36:35.446019372 +0300
@@ -986,6 +986,68 @@
 };
 MODULE_DEVICE_TABLE(spi, mcp251x_id_table);
 
+struct clk_parent_map {
+	const struct clk_hw	*hw;
+	struct clk_core		*core;
+	const char		*fw_name;
+	const char		*name;
+	int			index;
+};
+
+#include <linux/clk-provider.h>
+
+struct clk_core {
+	const char		*name;
+	const struct clk_ops	*ops;
+	struct clk_hw		*hw;
+	struct module		*owner;
+	struct device		*dev;
+	struct device_node	*of_node;
+	struct clk_core		*parent;
+	struct clk_parent_map	*parents;
+	u8			num_parents;
+	u8			new_parent_index;
+	unsigned long		rate;
+	unsigned long		req_rate;
+	unsigned long		new_rate;
+	struct clk_core		*new_parent;
+	struct clk_core		*new_child;
+	unsigned long		flags;
+	bool			orphan;
+	bool			rpm_enabled;
+	unsigned int		enable_count;
+	unsigned int		prepare_count;
+	unsigned int		protect_count;
+	unsigned long		min_rate;
+	unsigned long		max_rate;
+	unsigned long		accuracy;
+	int			phase;
+	struct clk_duty		duty;
+	struct hlist_head	children;
+	struct hlist_node	child_node;
+	struct hlist_head	clks;
+	unsigned int		notifier_count;
+#ifdef CONFIG_DEBUG_FS
+	struct dentry		*dentry;
+	struct hlist_node	debug_node;
+#endif
+	struct kref		ref;
+};
+
+#define CREATE_TRACE_POINTS
+#include <trace/events/clk.h>
+
+struct clk {
+	struct clk_core	*core;
+	struct device *dev;
+	const char *dev_id;
+	const char *con_id;
+	unsigned long min_rate;
+	unsigned long max_rate;
+	unsigned int exclusive_count;
+	struct hlist_node clks_node;
+};
+
 static int mcp251x_can_probe(struct spi_device *spi)
 {
 	const void *match = device_get_match_data(&spi->dev);
@@ -1000,6 +1062,28 @@
 	if (IS_ERR(clk))
 		return PTR_ERR(clk);
 
+//printk(KERN_INFO "[%s] clkp:%p\n", __FILE__, clk);
+printk(KERN_INFO "[%s] dev_id:%s con_id:%s\n", __FILE__, clk->dev_id, clk->con_id);
+printk(KERN_INFO "[%s] min_rate:%d ma[_rate:%d\n", __FILE__, clk->min_rate, clk->max_rate);
+printk(KERN_INFO "[%s] clk->devp:%p\n", __FILE__, clk->dev);
+printk(KERN_INFO "[%s] clk->core:%p\n", __FILE__, clk->core);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
+printk(KERN_INFO "[%s] clk->core->name:%s\n", __FILE__, clk->core->name);
 	freq = clk_get_rate(clk);
 	if (freq == 0 && pdata)
 		freq = pdata->oscillator_frequency;
